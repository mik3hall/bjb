package org.bjb;public class Strategy {	protected boolean isBalanced() { return false; }	protected String getName() { return "Strategy"; } 	protected int getCount() { return 0; }	public int getRunningCount() { return 0; }	// For balanced may different from preceding	public void updateCount(Deck d,Card c) {}	public int getBet() { return 0; }			protected boolean insure(Deck d) { return false; }		final static public Strategy getStrategy(String strategyName) {		Strategy strategy = null;		if (strategyName.equals("Hi-Lo")) strategy = new HighLowStrategy();		else if (strategyName.equals("Illustrious 18")) strategy = new Illustrious18Strategy();		else if (strategyName.equals("K-O Rookie")) strategy = new KORookieStrategy();		else if (strategyName.equals("K-O Preferred")) strategy = new KOPreferredStrategy();		else if (strategyName.equals("Red Seven Easy")) strategy = new Red7EasyStrategy();		else if (strategyName.equals("Red Seven")) strategy = new Red7Strategy();		else if (strategyName.equals("Basic Strategy")) strategy = new BasicStrategy();		else if (strategyName.equals("Thorp Basic Strategy")) strategy = new ThorpBasicStrategy();		return strategy;	}		protected String updateBasic(int count,Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (currentHand.canSurrender()) {			if (!soft) {				if (v == 15 & dv == 10)					return "Surrender";				else if (v == 16 && (dv == 9 || dv == 10 || dv == 1))					return "Surrender";			}  		}		// Check pair		if (sv != 0) {			switch (sv) {				case 1: 	// Always split					return "Split";				case 2:				case 3:					if (dv > 7 || dv < 4) break;					return "Split";				case 4:					if (dv == 5 || dv == 6) 						return "Split";					break;				case 5:					break;				case 6:					if (dv > 6 || dv < 3) break;					return "Split";				case 7:					if (dv == 1 || dv > 7) break;					return "Split";				case 8:					return "Split";				case 9:					if (dv == 1 || dv == 7 || dv > 9) break;					return "Split";				default:	// 10					break;	// never split			}		}		// Check double down		if (currentHand.canDoubleDown()) {			if (soft) {				switch (v) {					case 18:					case 17:						if (dv > 2 && dv < 7) {							return "Double down";						}						break;					case 16:					case 15:						if (dv > 3 && dv < 7) 							return "Double down";					case 14:					case 13:						if (dv > 4 && dv < 7) {							return "Double down";						}						break;					default: 						break;				}			}			else {				if (currentHand.bestScore() == 11 && dealersHand.dealersUp() != 1) {					return "Double down";				}				else if (v == 10 && dv != 10 && dv != 1) {					return "Double down";				}				else if (v == 9 && dv > 2 && dv < 7) {					return "Double down";				}			}		}		// Check standing		if (soft) {			switch (v) {				case 18:					if (dv == 9 || dv == 10 || dv == 1)						return "Hit";					else return "Stand";							default:					if (v < 18) return "Hit";							return "Stand";						// 19 or 20					}		}		else {			switch (dv) {				case 2:				case 3:					if (v > 12) 						return "Stand";					return "Hit";				case 4:				case 5:				case 6:					if (v > 11) 						return "Stand";					return "Hit";				default:					if (v > 16) {						return "Stand";					}					return "Hit";			}					}	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return false; }	protected boolean isDoubleChart() { return false; }	protected boolean isSoftChart() { return false; }}