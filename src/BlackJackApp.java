package org.bjb;import java.applet.*;import java.awt.*;import java.awt.event.*;import java.awt.image.BufferedImage;import java.io.InputStream;import javax.imageio.ImageIO;import javax.swing.*;import javax.swing.border.*;import com.bric.plaf.*;public class BlackJackApp extends JApplet implements ActionListener {	static JApplet applet = null;	static BlackJackGame game = null;	protected java.util.Vector buttons = new java.util.Vector();	private static BlackJackApp instance = null;	static final Dimension preferredSize = new Dimension(725,700);	static final Dimension minimumSize = new Dimension(725,700);	static final JPanel playingArea = new PlayingArea();	static final JWindow statusArea = new JWindow();	static final JTextField decks = new JTextField(4);	static final JTextField currCard = new JTextField(4);	static final JTextField cutCard = new JTextField(4);	static final JTextField roundNum = new JTextField(6);	static final JTextField elapsedTime = new JTextField(6);	static JButton playBtn = null;	static JButton ffBtn = null;	static final JButton standBtn = new JButton("Stand");	static final JButton hitBtn = new JButton("Hit");	static final JButton splitBtn = new JButton("Split");	static final JButton dblBtn = new JButton("Double down");	static final JButton insureBtn = new JButton("Insurance");	static final JButton surrenderBtn = new JButton("Surrender");	static final JButton chartBtn = new JButton("Chart");	static final JButton prefs = new JButton("Preferences");	static final JButton rules = new JButton("Rules");	static final JButton tips = new JButton("Tips");	static final JButton simulations = new JButton("Simulations");	static final JButton quitBtn = new JButton("Quit");	static final Preferences preferences = new Preferences(new JFrame(""));	static final Color lightBlue = new Color(0xccccff);	static ChartOver chartArea = null;	static InfoOver infoArea = null;	static ExitOver exitArea = null;	AudioClip shuffle = null,blackjack = null,draw = null,drop = null,pop = null;	AudioClip bust = null,dealer_bj = null, thanks = null;	static final Color teal = new Color(0x8080);		public static void main(String[] args) {		try {			if (System.getProperty("os.name").equals("Mac OS X")) 				UIManager.setLookAndFeel("ch.randelshofer.quaqua.QuaquaLookAndFeel");			else  				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());		} catch (Exception e) {		}		applet = new BlackJackApp();  		java.net.URL where = BlackJackApp.class.getResource("sounds/shuffle.wav"); 		((BlackJackApp)applet).setShuffle(Applet.newAudioClip(where));			where = BlackJackApp.class.getResource("sounds/register.wav");		((BlackJackApp)applet).setBlackjack(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/draw_card.wav");		((BlackJackApp)applet).setDraw(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/drop.wav");		((BlackJackApp)applet).setDrop(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/pop.wav");		((BlackJackApp)applet).setPlayerBust(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/game_over.wav");		((BlackJackApp)applet).setDealerBlackjack(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/thanks_for_playing.wav");		((BlackJackApp)applet).setThanks(Applet.newAudioClip(where));		JFrame f = new JFrame("BlackJack Blastoff");		f.getContentPane().add(applet);		f.addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				System.exit(0);			}		});//		f.setUndecorated(true);		f.setLocation(0,0);//		f.setSize(700,700);//		f.setPreferredSize(preferredSize);//		f.setMinimumSize(minimumSize);		f.setResizable(true);		f.pack();		BlackJackApp.positionWindow(f);		f.setVisible(true);			}		public BlackJackApp() {		// Create a BlackJackGame object ...				game = new BlackJackGame(preferences,decks,playingArea);		chartArea = new ChartOver();		infoArea = new InfoOver(statusArea);		exitArea = new ExitOver();		getContentPane().setBackground(teal);		Dimension tmp = Toolkit.getDefaultToolkit().getScreenSize();		GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();		GraphicsDevice d = e.getDefaultScreenDevice();		GraphicsConfiguration config= d.getDefaultConfiguration();        Insets insets =  Toolkit.getDefaultToolkit().getScreenInsets(config);        Dimension dim = new Dimension(Math.min((int)tmp.getWidth(),1024), Math.min((int)tmp.getHeight()-(insets.bottom+insets.top)-60,768));		setSize((int)dim.getWidth(),(int)dim.getHeight());		setPreferredSize(dim);		setMinimumSize(dim);		        GridBagConstraints c = new GridBagConstraints();        GridBagLayout gbl = new GridBagLayout(); 		getContentPane().setLayout(gbl); 		c.gridwidth = 12; 		c.gridheight = 10; 		c.anchor = c.NORTH; 		c.insets = insets(0,0,0,0);//  		playingArea.setBorder(BorderFactory.createLineBorder(Color.black)); 		gbl.setConstraints(playingArea,c); 		getContentPane().add(playingArea);		c.anchor = c.WEST; 		c.insets = insets(3,3,0,0); 		c.gridheight = 1;        c.gridwidth = 3;        c.gridy = 12; 		c.gridx = 6;		JPanel moButtons = new JPanel();		// mouse over buttons		moButtons.setBackground(teal);		moButtons.add(chartArea);		moButtons.add(infoArea);		moButtons.add(exitArea);		c.gridwidth = 6;		c.gridheight = 3;		c.anchor = c.EAST;/* 		c.gridwidth = 2; 		c.gridheight = 3; 		c.anchor = c.EAST; 		getContentPane().add(chartArea,c);		c.gridx = 10; 		getContentPane().add(infoArea,c);*/		getContentPane().add(moButtons,c);		c.anchor = c.WEST;				// Game buttons		c.gridx = 0;		c.gridheight = 2;		c.gridwidth = 1;		JPanel buttons = new JPanel(new GridBagLayout());		buttons.setBackground(teal);		GridBagConstraints bc = new GridBagConstraints();		playBtn = new PlayButton();		playBtn.setBackground(teal);		getRootPane().setDefaultButton((JButton)playBtn);		playBtn.addActionListener(this);		bc.gridx = 0;bc.gridy = 0;		bc.weightx = 1; bc.weighty = 1;		bc.fill = GridBagConstraints.BOTH;		buttons.add(playBtn,bc);		bc.gridy = 1;		ffBtn = new FFFButton();		ffBtn.setBackground(teal);		ffBtn.addActionListener(this);		buttons.add(ffBtn,bc);		getContentPane().add(buttons,c);		c.gridheight = 1;		c.gridwidth = 9;		c.gridx = 1;//		JPanel g_buttons = new JPanel(new GridBagLayout());		JPanel g_buttons = new JPanel(new GridLayout());		g_buttons.setBackground(teal);		GridBagConstraints gc = new GridBagConstraints();//		playBtn.setBackground(Color.white);//		playBtn.addActionListener(this);/*		playBtn.setOpaque(false);		playBtn.putClientProperty("JButton.segmentHorizontalPosition","first");		playBtn.putClientProperty("JButton.segmentVerticalPosition","only");		playBtn.setUI(new BevelButtonUI(playBtn));		playBtn.setFont(UIManager.getFont("Button.font"));		getRootPane().setDefaultButton((JButton)playBtn);		playBtn.addActionListener(this);		gc.gridx = 0;gc.gridy = 0;		gc.weightx = 1; gc.weighty = 1;		gc.fill = GridBagConstraints.BOTH;		g_buttons.add(playBtn,gc);*///		g_buttons.add(playBtn);		standBtn.setBackground(teal);		standBtn.setOpaque(false);		standBtn.putClientProperty("JButton.segmentHorizontalPosition","first");		standBtn.putClientProperty("JButton.segmentVerticalPosition","only");		standBtn.setUI(new BevelButtonUI());		standBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 1;		g_buttons.add(standBtn);//		buttons.add(button);		standBtn.addActionListener(this);//		g_buttons.add(standBtn);		hitBtn.setBackground(teal);		hitBtn.setOpaque(false);		hitBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		hitBtn.putClientProperty("JButton.segmentVerticalPosition","only");		hitBtn.setUI(new BevelButtonUI());		hitBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 2;		g_buttons.add(hitBtn);		hitBtn.addActionListener(this);//		g_buttons.add(hitBtn);		splitBtn.setBackground(teal);		splitBtn.setOpaque(false);		splitBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		splitBtn.putClientProperty("JButton.segmentVerticalPosition","only");		splitBtn.setUI(new BevelButtonUI());		splitBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 3;		g_buttons.add(splitBtn);		splitBtn.addActionListener(this);		//		g_buttons.add(splitBtn);		dblBtn.setBackground(teal);		dblBtn.setOpaque(false);		dblBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		dblBtn.putClientProperty("JButton.segmentVerticalPosition","only");		dblBtn.setUI(new BevelButtonUI());		dblBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 4;		g_buttons.add(dblBtn);		dblBtn.addActionListener(this);		//		dblBtn.setBackground(Color.white);//		g_buttons.add(dblBtn,gc);		insureBtn.setBackground(teal);		insureBtn.setOpaque(false);		insureBtn.addActionListener(this);		insureBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		insureBtn.putClientProperty("JButton.segmentVerticalPosition","only");		insureBtn.setUI(new BevelButtonUI());		insureBtn.setFont(UIManager.getFont("Button.font"));		g_buttons.add(insureBtn);		surrenderBtn.setBackground(teal);		surrenderBtn.setOpaque(false);		surrenderBtn.addActionListener(this);		surrenderBtn.putClientProperty("JButton.segmentHorizontalPosition","last");		surrenderBtn.putClientProperty("JButton.segmentVerticalPosition","only");		surrenderBtn.setUI(new BevelButtonUI());		surrenderBtn.setFont(UIManager.getFont("Button.font"));		g_buttons.add(surrenderBtn);		gbl.setConstraints(g_buttons,c);		getContentPane().add(g_buttons);		c.fill = c.NONE;					// Control buttons		c.gridx = 1;		c.gridy = 13;		JPanel c_buttons = new JPanel();		c_buttons.setBackground(teal);		chartBtn.setBackground(teal);		chartBtn.addActionListener(this);//		c_buttons.add(chartBtn);		prefs.setBackground(teal);		prefs.addActionListener(this);		c_buttons.add(prefs);		rules.setBackground(teal);		rules.addActionListener(this);		c_buttons.add(rules);		tips.setBackground(teal);		tips.addActionListener(this);		c_buttons.add(tips);		simulations.setBackground(teal);		simulations.addActionListener(this);		c_buttons.add(simulations);		quitBtn.setBackground(teal);		quitBtn.addActionListener(this);//		c_buttons.add(quitBtn);		gbl.setConstraints(c_buttons,c);		getContentPane().add(c_buttons);				Dimension pDim = new Dimension((int)dim.getWidth(),(int)dim.getHeight()-g_buttons.getHeight()-c_buttons.getHeight()-75);		playingArea.setSize((int)pDim.getWidth(),(int)pDim.getHeight());		playingArea.setPreferredSize(pDim);		playingArea.setMinimumSize(pDim);				instance = this;		// Layout the statusArea 		statusArea.setBackground(lightBlue); 		GridBagConstraints cs = new GridBagConstraints(); 		GridBagLayout gbls = new GridBagLayout(); 		statusArea.setLayout(gbls); 		statusArea.setSize(240,200);		statusArea.setPreferredSize(new Dimension(240,200));		statusArea.setMinimumSize(new Dimension(240,200));// 		getContentPane().add(statusArea,c); 		cs.insets = insets(0,0,4,4); 		cs.gridx = 0; 		cs.gridy = 0;  		statusArea.add(new JLabel("Decks"),cs); 		cs.gridx = 1;  		statusArea.add(decks,cs); 		decks.setText(new Integer(preferences.getDecksNum()).toString()); 		decks.setEditable(false); 		cs.gridy = 1; 		cs.gridx = 0; 		statusArea.add(new JLabel("Current card"),cs); 		cs.gridx = 1; 		statusArea.add(currCard,cs);		cs.gridy = 2;		cs.gridx = 0;		statusArea.add(new JLabel("Cut card"),cs);		cs.gridx = 1;		statusArea.add(cutCard,cs);		cs.gridx = 0;		cs.gridy = 3;		statusArea.add(new JLabel("Round"),cs);		cs.gridx = 1;		statusArea.add(roundNum,cs);		cs.gridx = 0;		cs.gridy = 4;		statusArea.add(new JLabel("Elapsed"),cs);		cs.gridx = 1;		statusArea.add(elapsedTime,cs);		// and play it!//		try { game.play(); }//		catch (IOException ioex) { ioex.printStackTrace(); }	}	public void setShuffle(AudioClip shuffle) {		this.shuffle = shuffle;	}		public void setBlackjack(AudioClip blackjack) {		this.blackjack = blackjack;	}		public void setDraw(AudioClip draw) {		this.draw = draw;	}		public void setDrop(AudioClip drop) {		this.drop = drop;	}		public void setPlayerBust(AudioClip pop) {		this.pop = pop;	}		public void setDealerBlackjack(AudioClip dealer_bj) {		this.dealer_bj = dealer_bj;	}		public void setThanks(AudioClip thanks) {		this.thanks = thanks;	} 		public static void playShuffle() {		if (instance != null) 			instance.shuffle.play();	}		public static void playBlackjack() {		instance.blackjack.play();	}			public static void playDraw() {		instance.draw.play();	}		public static void playDrop() {		instance.drop.play();	}		public static void playPlayerBust() {		instance.pop.play();	}		public static void playDealerBust() {		instance.pop.play();	}		public static void playDealerBJ() {		instance.dealer_bj.play();	}		public static void playThanks() {		instance.thanks.play();	}		public static void setDefault(String button) {		if (button.equals("Play")) {			instance.getRootPane().setDefaultButton(playBtn);			playBtn.requestFocus();		}		else if (button.equals("Stand")) {			instance.getRootPane().setDefaultButton(standBtn);			standBtn.requestFocus();		}		else if (button.equals("Hit")) {			instance.getRootPane().setDefaultButton(hitBtn);			hitBtn.requestFocus();		}		else if (button.equals("Double down")) {			instance.getRootPane().setDefaultButton(dblBtn);			dblBtn.requestFocus();		}		else if (button.equals("Insurance")) {			instance.getRootPane().setDefaultButton(insureBtn);			insureBtn.requestFocus();		}		else if (button.equals("Split")) {			instance.getRootPane().setDefaultButton(splitBtn);			splitBtn.requestFocus();		}	}		public static void guiDisable() {		standBtn.disable();		hitBtn.disable();		dblBtn.disable();		insureBtn.disable();		splitBtn.disable();	}		public static void guiEnable() {		standBtn.enable();		hitBtn.enable();		dblBtn.enable();		insureBtn.enable();		splitBtn.enable();	}		public static void playBtnReset() { 		((PlayButton)playBtn).reset(); 	}	public static void processChart() {		instance.game.processChart();	}		static void setDecks(int decksNUM) { 		decks.setText(new Integer(decksNUM).toString());		((PlayingArea)playingArea).clear();		instance.game = new BlackJackGame(preferences,decks,playingArea);	}			static void setPlayers(int playersNUM) {		instance.game.setPlayers(playersNUM);	}		public void actionPerformed(ActionEvent evt) {		String cmd = evt.getActionCommand();		if (cmd.equals("Play")) {			final SwingWorker worker = new SwingWorker() {				public Object construct() {					if (!game.isGameOver()) {						Toolkit.getDefaultToolkit().beep();						return null;					}					try {						SwingUtilities.invokeAndWait(new Runnable() {							public void run() {								((PlayingArea)playingArea).clear();							}						});					}					catch (Throwable tossed) { tossed.printStackTrace(); }					game.showBalances();					game.initialDeal(); 					return null;				}			};			worker.start();		}		else if (cmd.equals("Hit")) {			if (!hitBtn.isEnabled()) return;			if (!game.isGameOver()) {				final SwingWorker worker = new SwingWorker() {					public Object construct() {						if (!game.hit())							game.nextPlayer();						return null;					}				};				worker.start();			}		}		else if (cmd.equals("Split")) {			if (!game.isGameOver())				game.split();		}		else if (cmd.equals("Double down")) {			if (!game.isGameOver()) {				final SwingWorker worker = new SwingWorker() {					public Object construct() {						if (!game.doubleDown())							game.nextPlayer();						return null;					}				};				worker.start();			}		}		else if (cmd.equals("Stand")) {			if (!standBtn.isEnabled()) return;			if (!game.isGameOver()) {				final SwingWorker worker = new SwingWorker() {					public Object construct() {						if (!game.stand())							game.nextPlayer();						return null;					}				};				worker.start();			}		}		else if (cmd.equals("Chart")) {			if (!game.isGameOver())				game.showChart();		}		else if (cmd.equals("Preferences")) {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					preferences.setVisible(true);				}			});		}		else if (cmd.equals("Tips")) {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					Tip.getViewer().setVisible(true);				}			});		}		else if (cmd.equals("Simulations"))			playDealerBust();		else if (cmd.equals("Quit")) {			playThanks();			synchronized(this) {				try { wait(1500); }				catch (InterruptedException iex) {}			}			System.exit(0);		}	}			public static void positionWindow(Window w)	{		Dimension sSize = w.getToolkit().getScreenSize();	// Position the window  	 	int sHeight = sSize.height;  	 	int sWidth = sSize.width;  	 	Dimension aSize = w.getSize();  	 	int aHeight = aSize.height;  	 	int aWidth = aSize.width; 	 	w.setLocation((sWidth-aWidth)/2,(sHeight-aHeight)/2);	}		public Insets insets(int t, int l, int b, int r)	{		return new Insets(t,l,b,r);	}}class PlayButton extends JButton implements FocusListener {	public final ImageIcon play = TransparentIcon.getIcon("images/t_play.jpg");	public final ImageIcon playa = TransparentIcon.getIcon("images/t_playa.jpg");	public final ImageIcon playb = TransparentIcon.getIcon("images/t_playb.jpg");	public final ImageIcon pause = TransparentIcon.getIcon("images/t_pause.jpg");	public final ImageIcon pausea = TransparentIcon.getIcon("images/t_pausea.jpg");	public final ImageIcon pauseb = TransparentIcon.getIcon("images/t_pauseb.jpg");	boolean playMode = false;		public PlayButton() {		super("Play");		setBackground(BlackJackApp.teal);		setOpaque(false);		putClientProperty("JButton.segmentHorizontalPosition","only");		putClientProperty("JButton.segmentVerticalPosition","top");		setUI(new BevelButtonUI());		setIcon(play);//		setDisabledIcon(play);		setFont(UIManager.getFont("Button.font"));		addFocusListener(this);	}		public void focusGained(FocusEvent fev) {		if (BlackJackApp.game.isGameOver()) {					setIcon(playa);//			setDisabledIcon(playa);			setText("Play");			playMode = true;		}	}		public void reset() { //		enable();		focusGained(null); 	}		public void focusLost(FocusEvent fev) {		if (playMode) {			setIcon(pause);			setText("Pause");			playMode = false;		}	}}class DJButton extends JButton {		// debug paint stuff		public DJButton(String text) {		super(text);	}		public void repaint() {		new Exception("repaint").printStackTrace();		super.repaint();	}}class FFFButton extends JButton implements FocusListener {	public final ImageIcon fff = TransparentIcon.getIcon("images/t_FFF.jpg");	public final ImageIcon fffa = TransparentIcon.getIcon("images/t_FFFa.jpg");	public final ImageIcon fffb = TransparentIcon.getIcon("images/t_FFFb.jpg");		public FFFButton() {		super("Step");		setBackground(BlackJackApp.teal);		setOpaque(false);		putClientProperty("JButton.segmentHorizontalPosition","only");		putClientProperty("JButton.segmentVerticalPosition","bottom");		setUI(new BevelButtonUI());		setIcon(fff);		setFont(UIManager.getFont("Button.font"));		addFocusListener(this);	}		public void focusGained(FocusEvent fev) {		setIcon(fffa);//		setDisabledIcon(fffa);	}		public void focusLost(FocusEvent fev) {		setIcon(fff);//		setDisabledIcon(fff);	}}class TransparentIcon {	public static ImageIcon getIcon(String icon) {		InputStream	is = BlackJackApp.class.getResourceAsStream(icon);		try {			BufferedImage img = ImageIO.read(is);			return new ImageIcon(transparent(img));		}		catch (java.io.IOException ioex) { 			ioex.printStackTrace();		}		return null;	}	    private static BufferedImage transparent(BufferedImage bim) {        // make the image to be returned. same size as 'bim' of course. now the type is TYPE_INT_ARGB. This is important, because it means that it is capable of having transparent pixels        BufferedImage bimTransp = new BufferedImage(bim.getWidth(null), bim.getHeight(null),                BufferedImage.TYPE_INT_ARGB);        // get a 'pencil' i.e. a Graphics2D so we can draw some transparent pixels on 'bimTransp'        Graphics2D g2D = (Graphics2D) bimTransp.getGraphics();        // step through every single pixel on 'bim'         for (int y = 0; y < bim.getHeight(); y++) {            for (int x = 0; x < bim.getWidth(); x++) {                // if we find a color of 'transParencyColor' make this pixel transparent                if (bim.getRGB(x, y) == Color.white.getRGB()) {                     //System.out.println("Transparent pixel found!");                    g2D.setComposite(AlphaComposite.Src);                    g2D.setColor(new Color(0,0,0,0));                    g2D.drawRect(x, y, 1, 1);                } else {                    //System.out.println("Not transp");                    g2D.setColor(new Color(bim.getRGB(x, y)));                    g2D.drawRect(x, y, 1, 1);                }            }        }		return bimTransp;    }}