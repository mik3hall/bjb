package org.bjb;public class Illustrious18Strategy extends BasicStrategy implements BalancedStrategy {	protected int rc;						// running count	protected int trueCount;				// count per deck	protected int lastTopCard = 0;		// track deck top card for shuffle check		public String getName() { return "Illustrious 18"; }		public boolean isBalanced() { return true; }		public int getBet() { return benchmarkBet(); }		// As indicated in "Professional Blackjack" Benchmark rules	private int benchmarkBet() {		if (trueCount > 3) return 100;		else if (trueCount == 3) return 75;		else if (trueCount == 2) return 50;		else if (trueCount > -1) return 25;		else return 10;		// all negative	}		final public void updateCount(Deck d,Card c) { 		if (d.topCard < lastTopCard) {		// must of been shuffled			rc = 0;		}		else lastTopCard = d.topCard;		// save current		int v = c.iValue;		if (v >= 2 && v <= 6) rc += 1;		if (v == 10 | v == 1) rc -= 1;		trueCount = d.trueCount(rc);	}		final public int getCount() { return trueCount; }	final public int getRunningCount() { return rc; }	public boolean insure(Deck d) {		int decksNUM = d.decksNUM;		if (decksNUM == 1 && tc(d) >= 1.4d) return true;		else if (decksNUM == 2 && tc(d) >= 2.4d) return true;		else if (decksNUM == 3 && tc(d) >= 2.7d) return true;		else if (decksNUM >= 4 && tc(d) > 3.0d) return true;		return false;	}		final public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		if (BlackJackGame.rules.isH17())			return updateH17(d,currentHand,dealersHand);		return updateS17(d,currentHand,dealersHand);	}	private double tc(Deck d) {		return Math.floor((double)rc / ((double)d.decksNUM*52.0d-(double)d.topCard) / 52.0d);	}			private String updateH17(Deck d,Hand currentHand,Hand dealersHand) {		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (currentHand.canSurrender()) {		}		// Check insurance		if (dv == 1) {			int decksNUM = d.decksNUM;			if (decksNUM == 1 && tc(d) >= 1.4d) return "Insurance";			else if (decksNUM == 2 && tc(d) >= 2.4d) return "Insurance";			else if (decksNUM == 3 && tc(d) >= 2.7d) return "Insurance";			else if (decksNUM >= 4 && tc(d) > 3.0d) return "Insurance";		}		// Check pair		if (sv != 0) {			if (!BlackJackGame.rules.isDAS()) {		// double not allowed after split				if (dv == 10) {					if (dv == 5 && trueCount < 5) return "Hit";					else if (dv == 6 && trueCount < 4) return "Hit";				}			}			else {			// DAS - double after split is allowed				if (dv == 10) {					if (dv == 5 && trueCount < 5) return "Hit";					else if (dv == 6 && trueCount < 4) return "Hit";				}			}		}		else if (v == 16) {			if (dv == 9 && trueCount < 5) return "Hit";			else if (dv == 10 && trueCount < 0) return "Hit";		}		else if (v == 15) {			if (dv == 10 && trueCount < 4) return "Hit";		}		else if (v == 13) {			if (dv == 2 && trueCount < 0) return "Hit";			else if (dv == 3 && trueCount < -2) return "Hit";		}		else if (v == 12) {			if (dv == 2 && trueCount < 3) return "Hit";			else if (dv == 3 && trueCount < 1) return "Hit";			else if (dv == 4 && trueCount < 0) return "Hit";			else if (dv == 5 && trueCount < -1) return "Hit";			else if (dv == 6 && trueCount < -3) return "Hit";  		}		else if (v == 11) {			if (dv == 1 && trueCount < 0) return "Hit"; 		}		else if (v == 10) {			if (dv == 10 && trueCount < 4) return "Hit";			else if (dv == 1 && trueCount < 3) return "Hit";		}		else if (v == 9) {			if (dv == 2 && trueCount < 1) return "Hit";			else if (dv == 7 && trueCount < 3) return "Hit";				}				return super.updateBasic(trueCount,d,currentHand,dealersHand);	}		// Dealer stands on soft 17	private String updateS17(Deck d,Hand currentHand,Hand dealersHand) {		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (currentHand.canSurrender()) {		}		// Check insurance		if (dv == 1) {			int decksNUM = d.decksNUM;			if (decksNUM == 1 && tc(d) >= 1.4d) return "Insurance";			else if (decksNUM == 2 && tc(d) >= 2.4d) return "Insurance";			else if (decksNUM == 3 && tc(d) >= 2.7d) return "Insurance";			else if (decksNUM >= 4 && tc(d) > 3.0d) return "Insurance";		}		// Check pair		if (sv != 0) {			if (!BlackJackGame.rules.isDAS()) {		// double not allowed after split				if (dv == 10) {					if (dv == 5 && trueCount < 5) return "Hit";					else if (dv == 6 && trueCount < 4) return "Hit";				}			}			else {			// DAS - double after split is allowed				if (dv == 10) {						if (dv == 5 && trueCount < 5) return "Hit";					else if (dv == 6 && trueCount < 4) return "Hit";				}			}		}		else if (v == 16) {			if (dv == 9 && trueCount < 5) return "Hit";			else if (dv == 10 && trueCount < 0) return "Hit";		}		else if (v == 15) {			if (dv == 10 && trueCount < 4) return "Hit";		}		else if (v == 13) {			if (dv == 2 && trueCount < 0) return "Hit";			else if (dv == 3 && trueCount < -1) return "Hit";		}		else if (v == 12) {			if (dv == 2 && trueCount < 3) return "Hit";			else if (dv == 3 && trueCount < 2) return "Hit";			else if (dv == 4 && trueCount < 0) return "Hit";			else if (dv == 5 && trueCount < -1) return "Hit";			else if (dv == 6 && trueCount < 0) return "Hit";  		}		else if (v == 11) {			if (dv == 1 && trueCount < 1) return "Hit"; 		}		else if (v == 10) {			if ((dv == 1 || dv == 10) && trueCount < 4) return "Hit";		}		else if (v == 9) {			if (dv == 2 && trueCount < 1) return "Hit";			else if (dv == 7 && trueCount < 3) return "Hit";		}				return super.updateBasic(trueCount,d,currentHand,dealersHand);	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return false; }	protected boolean isDoubleChart() { return false; }	protected boolean isSoftChart() { return false; }}