package org.bjb;import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.border.*;public class Preferences extends JDialog {	private static int decks = 1, players = 1;	private static boolean defEnabled = true;	private static String[] s = new String[] { "Hi-Lo","Illustrious 18","K-O Rookie","K-O Preferred","Red Seven Easy","Basic Strategy","Thorp Basic Strategy" };	static final JTextField deckNum = new JTextField(7);	static final JTextField playerNum = new JTextField(7);	static final JComboBox strategies = new JComboBox(s); 	// Create an action    Action canact = new AbstractAction("Cancel") {        // This method is called when the button is pressed        public void actionPerformed(ActionEvent evt) {            setVisible(false);        }    };	JButton cancel = new JButton(canact);		// Create an action    Action okact = new AbstractAction("OK") {        // This method is called when the button is pressed        public void actionPerformed(ActionEvent evt) { 			save();            setVisible(false);        }    };	JButton ok = new JButton(okact); 	Action default_act = new AbstractAction("Default Buttons") {        public void actionPerformed(ActionEvent evt) {			// No action        }    };    JCheckBox defButton = new JCheckBox(default_act);    			public Preferences(JFrame owner) {		super(owner,"Preferences",false);        setBackground(Color.white); 		getContentPane().setLayout(new GridBagLayout());        GridBagConstraints c = new GridBagConstraints();		c.insets = insets(5,10,5,15);		int anchor = c.anchor;		c.anchor= c.EAST;		getContentPane().add(new JLabel("Number of decks"),c);		c.gridx = 1;		c.anchor = c.WEST;		deckNum.setText(new Integer(decks).toString());		getContentPane().add(deckNum,c);		c.gridy = 3;		c.gridx = 0;		c.anchor = c.EAST;		getContentPane().add(new JLabel("Number of players"),c);		c.gridx = 1;		c.anchor = c.WEST;		playerNum.setText(new Integer(players).toString());		getContentPane().add(playerNum,c);		c.gridx = 0;		c.gridy = 5;		c.gridheight = 2;		Border raisedbevel = BorderFactory.createRaisedBevelBorder();		Border blackline = BorderFactory.createLineBorder(Color.black);		Border border = BorderFactory.createCompoundBorder(blackline,raisedbevel);		JLabel dep = new JLabel("Basic Strategy Dependent");  		Font f = dep.getFont();  		f = f.deriveFont(14f);  		dep.setFont(f);  		dep.setForeground(Color.blue);		getContentPane().add(dep,c);		c.gridx = 1;		JPanel bsOptions = new JPanel();		bsOptions.setBackground(Color.white);		bsOptions.setLayout(new GridLayout(2,1));		ButtonGroup basicStrategy = new ButtonGroup();		JRadioButton total = new JRadioButton("Total",true);		basicStrategy.add(total);		bsOptions.add(total);		JRadioButton content = new JRadioButton("Content",false);		basicStrategy.add(content);		bsOptions.add(content,c);		bsOptions.setBorder(border);		getContentPane().add(bsOptions,c);		c.gridheight = 1;		c.gridx = 0;		c.gridy = 11;		c.anchor = c.EAST;		getContentPane().add(new JLabel("Strategies"),c);		c.gridx = 1;		c.anchor = c.WEST;		getContentPane().add(strategies,c);		c.gridy = 13;		c.gridx = 0;		defButton.setSelected(true);		// By default		getContentPane().add(defButton,c);		c.gridy = 15;		JPanel buttons = new JPanel();		buttons.setBackground(Color.white);		buttons.add(ok);		getRootPane().setDefaultButton(ok);		buttons.add(cancel);		getContentPane().add(buttons,c); 		pack(); 		positionWindow();		addWindowListener(new WindowAdapter() {			public void windowOpened(WindowEvent evt) {				deckNum.setText(new Integer(decks).toString());				playerNum.setText(new Integer(players).toString());				defButton.setEnabled(defEnabled);						}		});	}	private void save() {		if (decks != new Integer(deckNum.getText()).intValue()) {			decks = new Integer(deckNum.getText()).intValue();			BlackJackApp.setDecks(decks);		}		if (players != new Integer(playerNum.getText()).intValue()) {			players = new Integer(playerNum.getText()).intValue();			BlackJackApp.setPlayers(players);		}	}				public int getDecksNum() { return decks; }	public int getPlayersNum() { return players; }		public Insets insets(int t, int l, int b, int r)	{		return new Insets(t,l,b,r);	}			public void positionWindow()	{		Dimension sSize = this.getToolkit().getScreenSize();	// Position the window  	 	int sHeight = sSize.height;  	 	int sWidth = sSize.width;  	 	Dimension aSize = this.getSize();  	 	int aHeight = aSize.height;  	 	int aWidth = aSize.width; 	 	this.setLocation((sWidth-aWidth)/2,(sHeight-aHeight)/2);	}}