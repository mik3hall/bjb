package org.bjb;import java.util.Random;class Deck {	// Variable declarations	int cards[];		// Array of decksNUM*52 cards	int topCard;		// 0-51 (index of card in deck)	Random random;	boolean shuffled = false;	int decksNUM = 0;	int cutCard = 0;		// Method declarations	public Deck(int decksNUM) {		// Constructor		this.decksNUM = decksNUM;		cards = new int[decksNUM*52];		for (int j=0;j<decksNUM;j++)			for (int i=0; i<52; i++) cards[i+(j*52)] = i;		topCard = 0;		random = new java.util.Random(System.currentTimeMillis());		shuffle();		shuffled = true;	}		public void checkShuffle() {		if (cutCard == 0) {								int penetration;			if (decksNUM < 4) penetration = 66;			else penetration = 75;			cutCard = decksNUM * 52 * penetration / 100;		}				if (topCard > cutCard) {			shuffle();			shuffled = true;			topCard = 0;		}	}		public void shuffle() {		BlackJackApp.playShuffle();		// Repeat 52 times		for (int i=0;i<decksNUM*52;++i) {			// Randomly exchange two cards in the deck			int j = randomCard();			int k = randomCard();			int temp = cards[j];			cards[j] = cards[k];			cards[k] = temp;		}		topCard = 0;	}			public int trueCount(int count) {		return (int)Math.floor((double)count / ((double)decksNUM*52.0d-(double)topCard) / 52.0d);	}			int randomCard() {		int r = random.nextInt();		if (r<0) r = 0-r;		return r%(decksNUM*52);	}		boolean isShuffled() { return shuffled; }		Card deal() {		shuffled = false;		Card card = new Card(cards[topCard]);		++topCard;		return card;	}}		// End of Deck class