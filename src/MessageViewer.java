package org.bjb;import java.awt.*;import java.awt.event.*;import java.awt.font.*;import java.awt.geom.AffineTransform;import java.awt.geom.Rectangle2D;import java.awt.image.*;import javax.swing.*;import javax.swing.Timer;import java.util.Vector;public class MessageViewer implements ActionListener {	Vector messages = new Vector();	final PlayingArea pa;	float lastX = 999.0f;	float endX = -999.0f;	private static final String greeting = "Welcome to Blackjack Blastoff!";	private static int greetings = 0;	private static int maxGreetings = 0;	private static final int SPACING = 10;	final private static Font font = new Font("Serif", Font.BOLD | Font.ITALIC, 16);	final private BufferedImage offscreen;	final private Graphics2D og2;	final private FontRenderContext frc;		Timer timer = null;	/*		Message indicating casinos could eliminate card counting edge with 8 deck show		except probably no one would play.		Something on unbalanced counts and pivot count.	*/	int yClearInc = 4;//	int yClearInc = 5;		// 4 If not outline 		public MessageViewer(final PlayingArea pa) {		this.pa = pa;		if (pa.getGraphics() == null) throw new IllegalArgumentException("MessageViewer graphics unavailable");		Graphics2D gtmp = (Graphics2D)pa.getGraphics();		gtmp.setRenderingHint(RenderingHints.KEY_ANTIALIASING,			RenderingHints.VALUE_ANTIALIAS_ON);		gtmp.setStroke(new BasicStroke(2.0f));		frc = gtmp.getFontRenderContext();		String s = greeting;		GlyphVector gv = font.createGlyphVector(frc, s);		Rectangle2D r = gv.getPixelBounds(frc,0,0);		offscreen = new BufferedImage(pa.getWidth(),(int)r.getHeight()+yClearInc,BufferedImage.TYPE_INT_ARGB);		og2 = offscreen.createGraphics();		og2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,			RenderingHints.VALUE_ANTIALIAS_ON);		og2.setStroke(new BasicStroke(2.0f));		SwingUtilities.invokeLater(new Runnable() {			public void run() {				draw((Graphics2D)pa.getGraphics());			}		});	}		public void addMessage(String text) {		messages.addElement(text);		greetings = 0;	}	public void actionPerformed(ActionEvent evt) {		try {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					draw((Graphics2D)pa.getGraphics());				}			});		}		catch (Throwable tossed) { tossed.printStackTrace(); }	}	 		public void draw(Graphics2D g2) {//		if (messages.size() == 0) //			return;		if (g2 == null) return;		Color c = g2.getColor();//		for (int i=0;i<messages.size();i++) {//			String s = (String)messages.elementAt(i);			String s = greeting;			GlyphVector gv = font.createGlyphVector(frc, s);			int length = gv.getNumGlyphs();				Rectangle2D r = gv.getPixelBounds(frc,0,0);			maxGreetings = pa.getWidth() / (int)r.getWidth() + SPACING;					int currWidth = 0;	// greetings * ((int)r.getWidth() + SPACING);			og2.setColor(pa.getBackground());			og2.fillRect(0,0,pa.getWidth(),(int)r.getHeight()+yClearInc);			if (greetings < maxGreetings && lastX < (pa.getWidth() - currWidth - (r.getWidth() + SPACING))) 				greetings++;									float x = 0.0f;			if (lastX == -1.0f) {				x = (float)pa.getWidth() - (float)r.getWidth() - 2.0f;				lastX = x;			}			else if (lastX >= 0.0f) {				x = lastX - 2.0f;				lastX = x;			}			else {				timer.stop();				timer = null;			}			float y = (float)r.getHeight();			for (int i=0;i<greetings;i++) {				if (i % 3 == 0) 					og2.setColor(Color.blue);				else if (i % 3 == 1)					og2.setColor(Color.black);				else if (i % 3 == 2)					og2.setColor(Color.red);//				drawOutlined(g2,gv,x,y);				og2.drawGlyphVector(gv,x,y);				x += r.getWidth() + SPACING;			}			//		}		g2.setColor(c);		g2.drawImage(offscreen,0,0,null);//		g2.transform(0,0);		// restore origin		if (timer == null) {// This works fine just drawing the glyphvector			timer = new Timer(50,this); //			timer = new Timer(100,this);			timer.start();		}	}		private void drawOutlined(Graphics2D g2,GlyphVector gv, float x, float y) {		int length = gv.getNumGlyphs();				Color c = g2.getColor();		for (int i = 0; i < length; i++) {		  AffineTransform at = AffineTransform.getTranslateInstance(x,y);		  Shape glyph = gv.getGlyphOutline(i);		  Shape transformedGlyph = at.createTransformedShape(glyph);		  g2.setColor(Color.black);		  g2.draw(transformedGlyph);		  g2.setColor(c);		  g2.fill(transformedGlyph);		}	} }