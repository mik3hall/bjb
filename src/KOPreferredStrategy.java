package org.bjb;public class KOPreferredStrategy extends KORookieStrategy implements UnbalancedStrategy {	public boolean insure(Deck d) {		if (getCount() >= 3) return true;		return false;	}			public final String updateBasic(int count,Deck d,Hand currentHand,Hand dealersHand) {		int v = currentHand.bestScore();		final int dv = dealersHand.dealersUp();		if (!currentHand.isSoft()) {				switch(v) {				case 16:					if (dv == 9) {						if (count > 4) 							return "Stand";						else return "Hit";					}					if (dv == 10) {						if (count > getKeyCount())							return "Stand";						else return "Hit";					}					return super.updateBasic(count,d,currentHand,dealersHand);				case 15:					if (dv == 10) {						if (count > 4) 							return "Stand";						else return "Hit";					}					return super.updateBasic(count,d,currentHand,dealersHand);				case 13:					if (dv == 2 || dv == 3) {						if (getInitialRunningCount() >= -4 && count > getInitialRunningCount())							return "Stand";						else return "Hit";					}					return super.updateBasic(count,d,currentHand,dealersHand);				case 12:					if (dv == 2 || dv == 3) {						if (count > 4)							return "Stand";						else return "Hit";					}					if (dv > 3 && dv < 7) {						if (getInitialRunningCount() >= -4 && count > getInitialRunningCount())							return "Stand";						else return "Hit";					}					return super.updateBasic(count,d,currentHand,dealersHand);			}		}		return super.updateBasic(count,d,currentHand,dealersHand);	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return false; }	protected boolean isDoubleChart() { return false; }	protected boolean isSoftChart() { return false; }}