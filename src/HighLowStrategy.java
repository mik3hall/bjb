package org.bjb;public class HighLowStrategy extends BasicStrategy implements BalancedStrategy {	protected int rc;						// running count	protected int trueCount;				// count per deck	protected int lastTopCard = 0;		// track deck top card for shuffle check		public String getName() { return "Hi-Lo"; }		public boolean isBalanced() { return true; }		public int getBet() { return benchmarkBet(); }		// As indicated in "Professional Blackjack" Benchmark rules	private int benchmarkBet() {		if (trueCount > 3) return 100;		else if (trueCount == 3) return 75;		else if (trueCount == 2) return 50;		else if (trueCount > -1) return 25;		else return 10;		// all negative	}		public void updateCount(Deck d,Card c) { 		if (d.topCard < lastTopCard) {		// must of been shuffled			rc = 0;		}		else lastTopCard = d.topCard;		// save current		int v = c.iValue;		if (v >= 2 && v <= 6) rc += 1;		if (v == 10 | v == 1) rc -= 1;		trueCount = d.trueCount(rc);	}		public int getCount() { return trueCount; }	public int getRunningCount() { return rc; }		public boolean insure(Deck d) {		int decksNUM = d.decksNUM;		if (decksNUM == 1 && tc(d) >= 1.4d) return true;		else if (decksNUM == 2 && tc(d) >= 2.4d) return true;		else if (decksNUM == 3 && tc(d) >= 2.7d) return true;		else if (decksNUM >= 4 && tc(d) > 3.0d) return true;		return false;	}		public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		if (BlackJackGame.rules.isH17())			return updateH17(d,currentHand,dealersHand);		return updateS17(d,currentHand,dealersHand);	}		private double tc(Deck d) {		return Math.floor((double)rc / ((double)d.decksNUM*52.0d-(double)d.topCard) / 52.0d);	}		private String updateH17(Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (currentHand.canSurrender()) {		}		// Check insurance		if (dv == 1) {			}		// Check pair		if (sv != 0) {			if (!BlackJackGame.rules.isDAS()) {		// double not allowed after split				switch (sv) {					case 1: 							if (dv == 7 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -7) return "Hit";						else if (dv == 10 && trueCount < -8) return "Hit";						else if (dv == 1 && trueCount < -4) return "Hit";						return "Split";					case 2:						if (dv == 2 && trueCount < 7) return "Hit";						else if (dv == 3 && trueCount < 3) return "Hit";						else if (dv == 4 && trueCount < 0) return "Hit";						else if (dv == 5 && trueCount < -4) return "Hit";						else if (dv == 6 && trueCount < -7) return "Hit";						else if (dv == 1 || dv > 7) return "Hit";						return "Split";					case 3:						if (dv == 2 && trueCount < 8) return "Hit";						else if (dv == 3 && trueCount < 3) return "Hit";						else if (dv == 4 && trueCount < 0) return "Hit";						else if (dv == 5 && trueCount < -2) return "Hit";						else if (dv == 6 && trueCount < -5) return "Hit";						else if (dv == 1 || dv > 7) return "Hit"; 						return "Split";					case 4:					case 5:						break;					case 6:						if (dv == 2 && trueCount < 1) return "Hit";						else if (dv == 3 && trueCount < -1) return "Hit";						else if (dv == 4 && trueCount < -3) return "Hit";						else if (dv == 5 && trueCount < -5) return "Hit";						else if (dv == 6 && trueCount < -7) return "Hit";						else if (dv == 1 || dv > 6) return "Hit";						return "Split";					case 7:						if (dv == 2 && trueCount < -8) return "Hit";						else if (dv == 3 && trueCount < -10) return "Hit"; 						else if (dv > 3 && dv < 8) return "Split";						else if (dv == 1 || dv > 7) return "Hit"; 						return "Split";					case 8:						if (dv == 10 && trueCount >= 6) return "Hit";						if (dv == 1 && trueCount < -1) return "Hit";						return "Split";					case 9:						if (dv == 1 && trueCount < 2) return "Hit";						else if (dv == 2 && trueCount < -1) return "Hit";						else if (dv == 3 && trueCount < -2) return "Hit";						else if (dv == 4 && trueCount < -3) return "Hit";						else if (dv == 5 && trueCount < -4) return "Hit";						else if (dv == 6 && trueCount < -6) return "Hit";						else if (dv == 7 && trueCount < 6) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -9) return "Hit";						else if (dv == 10) return "Stand"; 						return "Split";					default:	// 10						if (dv == 2) return "Stand";						else if (dv == 3 && trueCount < 8) return "Hit";						else if (dv == 4 && trueCount < 6) return "Hit";						else if (dv == 5 && trueCount < 5) return "Hit";						else if (dv == 6 && trueCount < 4) return "Hit";						else if (dv == 1 || dv > 6) return "Stand";						return "Split";				}			}			else {			// DAS - double after split is allowed				switch (sv) {					case 1: 							if (dv == 7 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -7) return "Hit";						else if (dv == 10 && trueCount < -8) return "Hit";						else if (dv == 1 && trueCount < -4) return "Hit";						return "Split";					case 2:						if (dv == 2 && trueCount < -2) return "Hit";						else if (dv == 3 && trueCount < -5) return "Hit";						else if (dv == 4 && trueCount < -7) return "Hit";						else if (dv == 5 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < 5) return "Hit";						else if (dv == 1 || dv > 8) return "Hit";						return "Split";					case 3:						if (dv == 2 && trueCount < 0) return "Hit";						else if (dv == 3 && trueCount < -3) return "Hit";						else if (dv == 4 && trueCount < -7) return "Hit";						else if (dv == 5 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < 4) return "Hit";						else if (dv == 1 || dv > 8) return "Hit";						return "Split";					case 4:						if (dv == 2) return "Hit";						else if (dv == 3 && trueCount < 6) return "Hit";						else if (dv == 4 && trueCount < 1) return "Hit";						else if (dv == 5 && trueCount < -1) return "Hit";						else if (dv == 6 && trueCount < -6) return "Hit";						else if (dv == 1 || dv > 6) return "Hit";						return "Split";					case 5:						break;					case 6:						if (dv == 2 && trueCount < -2) return "Hit";						else if (dv == 3 && trueCount < -4) return "Hit";						else if (dv == 4 && trueCount < -6) return "Hit";						else if (dv == 5 && trueCount < -8) return "Hit";						else if (dv == 6 && trueCount < -10) return "Hit";						else if (dv == 1 || dv > 6) return "Hit";						return "Split";					case 7:						if (dv == 2 && trueCount < -10) return "Hit";						else if (dv > 2 && dv < 8) return "Split";						else if (dv == 8 && trueCount < 5) return "Hit";						else if (dv == 1 || dv > 8) return "Hit"; 						return "Split";					case 8:						if (dv == 10 && trueCount >= 8) return "Hit";						if (dv == 1 && trueCount < -1) return "Hit";						return "Split";					case 9:						if (dv == 1 && trueCount < 1) return "Hit";						else if (dv == 2 && trueCount < -2) return "Hit";						else if (dv == 3 && trueCount < -4) return "Hit";						else if (dv == 4 && trueCount < -5) return "Hit";						else if (dv == 5 && trueCount < -6) return "Hit";						else if (dv == 6 && trueCount < -8) return "Hit";						else if (dv == 7 && trueCount < 3) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -9) return "Hit";						else if (dv == 10) return "Stand"; 						return "Split";					default:	// 10						if (dv == 2) return "Stand";						else if (dv == 3 && trueCount < 8) return "Hit";						else if (dv == 4 && trueCount < 6) return "Hit";						else if (dv == 5 && trueCount < 5) return "Hit";						else if (dv == 6 && trueCount < 4) return "Hit";						else if (dv == 1 || dv > 6) return "Stand";						return "Split";				}			}		}		else if (soft) {			switch (v) {				case 20: 					if (dv == 2 && trueCount < 10) return "Hit";					else if (dv == 3 && trueCount < 8) return "Hit";					else if (dv == 4 && trueCount < 6) return "Hit";					else if (dv == 5 && trueCount < 5) return "Hit";					else if (dv == 6 && trueCount < 4) return "Hit";					else if (dv == 1 || dv > 6) return "Stand";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 19:					if (dv == 2 && trueCount < 8) return "Hit";					else if (dv == 3 && trueCount < 5) return "Hit";					else if (dv == 4 && trueCount < 3) return "Hit";					else if (dv == 5 && trueCount < 1) return "Hit";					else if (dv == 6 && trueCount < 0) return "Hit";					else if (dv == 1 || dv > 6) return "Stand";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 18:					if (BlackJackGame.rules.isDOA()) {											if (dv == 2 && trueCount < 0) return "Stand";						else if (dv == 3 && trueCount < -2) return "Stand";						else if (dv == 4 && trueCount < -6) return "Stand";						else if (dv == 5 && trueCount < -8) return "Stand";						else if (dv == 6) return "Double down";						else if (dv == 7 || dv == 8) return "Stand"; 						else if (dv == 1 || dv > 8) return "Hit";						return "Double down";					}					else {						if (dv > 1 && dv < 9) return "Stand";						return "Hit"; 					}				case 17:					if (dv == 2 && trueCount < 1) return "Hit";					else if (dv == 3 && trueCount < -3) return "Hit";					else if (dv == 4 && trueCount < -7) return "Hit";					else if (dv == 5 && trueCount < -10) return "Hit";					else if (dv == 6) {						if (BlackJackGame.rules.isDOA()) return "Double down";						else return "Hit";						}					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 16:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 3) return "Hit";					else if (dv == 4 && trueCount < -3) return "Hit";					else if (dv == 5 && trueCount < -6) return "Hit";					else if (dv == 6) {						if (BlackJackGame.rules.isDOA()) return "Double down";						else return "Hit";						}					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 15:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 6) return "Hit";					else if (dv == 4 && trueCount < 0) return "Hit";					else if (dv == 5 && trueCount < -4) return "Hit"; 					else if (dv == 6 && trueCount < -10) return "Hit";					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 14:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 6) return "Hit";					else if (dv == 4 && trueCount < 1) return "Hit";					else if (dv == 5 && trueCount < -1) return "Hit"; 					else if (dv == 6 && trueCount < -5) return "Hit";					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 13:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 7) return "Hit";					else if (dv == 4 && trueCount < 3) return "Hit";					else if (dv == 5 && trueCount < 0) return "Hit"; 					else if (dv == 6 && trueCount < -2) return "Hit";					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";									default:					break;			}		}		else if (v == 20 || v == 19 || v == 18) return "Stand";		else if (v == 17) {			if (dv == 1 && trueCount < -4) return "Hit";			return "Stand";		}		else if (v == 16) {			if (dv == 2 && trueCount < -9) return "Hit";			else if (dv == 3 && trueCount < -10) return "Hit";			else if (dv > 3 && dv < 7) return "Stand";			else if (dv == 7 && trueCount< 9) return "Hit";			else if (dv == 8 && trueCount < 7) return "Hit";			else if (dv == 9 && trueCount < 5) return "Hit";			else if (dv == 10 && trueCount < 0) return "Hit";			else if (dv == 1 && trueCount < 3) return "Hit";			return "Stand";		}		else if (v == 15) {			if (dv == 2 && trueCount < -5) return "Hit";			else if (dv == 3 && trueCount < -7) return "Hit";			else if (dv == 4 && trueCount < -8) return "Hit";			else if (dv == 5 && trueCount < -9) return "Hit";			else if ((dv == 7 || dv == 8) && trueCount < 10) return "Hit";			else if (dv == 9 && trueCount < 8) return "Hit";			else if (dv == 10 && trueCount < 4) return "Hit";			else if (dv == 1 && trueCount < 5) return "Hit";			return "Stand"; 		}		else if (v == 14) {			if (dv == 2 && trueCount < -3) return "Hit";			else if (dv == 3 && trueCount < -5) return "Hit";			else if (dv == 4 && trueCount < -6) return "Hit";			else if (dv == 5 && trueCount < -7) return "Hit";			else if (dv == 6 && trueCount < -9) return "Hit";			else if (dv == 1 || dv > 6) return "Hit";			return "Stand";		}		else if (v == 13) {			if (dv == 2 && trueCount < 0) return "Hit";			else if (dv == 3 && trueCount < -2) return "Hit";			else if (dv == 4 && trueCount < -3) return "Hit";			else if (dv == 5 && trueCount < -4) return "Hit";			else if (dv == 6 && trueCount < -7) return "Hit";			else if (dv == 1 || dv > 6) return "Hit";			return "Stand";						}		else if (v == 12) {			if (dv == 2 && trueCount < 3) return "Hit";			else if (dv == 3 && trueCount < 1) return "Hit";			else if (dv == 4 && trueCount < 0) return "Hit";			else if (dv == 5 && trueCount < -1) return "Hit";			else if (dv == 6 && trueCount < -3) return "Hit";  			else if (dv == 1 || dv > 6) return "Hit";			return "Stand";		}		else if (v == 11) {			if (dv > 1 && dv < 7) return "Double down";			else if (dv == 7 && trueCount < -9) return "Hit";			else if (dv == 8 && trueCount < -6) return "Hit";			else if ((dv == 9 || dv == 10) && trueCount < -4) return "Hit";			else if (dv == 1 && trueCount < 0) return "Hit"; 			return "Double down";		}		else if (v == 10) {			if (dv == 2 && trueCount < -8) return "Hit";			else if (dv == 3 && trueCount < -9) return "Hit";			else if (dv == 4 && trueCount < -10) return "Hit";			else if (dv == 5 || dv ==  6) return "Double down";			else if (dv == 7 && trueCount < -6) return "Hit";			else if (dv == 8 && trueCount < -4) return "Hit";			else if (dv == 9 && trueCount < -1) return "Hit";			else if (dv == 10 && trueCount < 4) return "Hit";			else if (dv == 1 && trueCount < 3) return "Hit";			return "Double down";   		}		else if (v == 9) {			if (dv == 2 && trueCount < 1) return "Hit";			else if (dv == 3 && trueCount < 0) return "Hit";			else if (dv == 4 && trueCount < -2) return "Hit";			else if (dv == 5 && trueCount < -4) return "Hit";			else if (dv == 6 && trueCount < -6) return "Hit";			else if (dv == 7 && trueCount < 3) return "Hit";			else if (dv == 8 && trueCount < 7) return "Hit";			else if (dv == 1 || dv > 8) return "Hit";			if (BlackJackGame.rules.isDOA())				return "Double down";			else return "Stand";					}		else if (v == 8) {			if (dv == 2) return "HIt";			else if (dv == 3 && trueCount < 9) return "Hit";			else if (dv == 4 && trueCount < 5) return "Hit";			else if (dv == 5 && trueCount < 3) return "Hit";			else if (dv == 6 && trueCount < 1) return "Hit";			else if (dv == 1 || dv > 6) return "Hit";			if (BlackJackGame.rules.isDOA())				return "Double down";			else return "Stand";			 		}		else if (v == 7) {			if (dv > 1 && dv < 5) return "Hit";			else if ((dv == 5 || dv == 6) && trueCount < 9) return "Hit";			else if (dv == 1 || dv > 6) return "Hit";			if (BlackJackGame.rules.isDOA())				return "Double down";			else return "Stand";			}		else if (dv == 6 || dv == 5) return "Hit";				return super.updateBasic(trueCount,d,currentHand,dealersHand);	}		// Dealer stands on soft 17	private String updateS17(Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (currentHand.canSurrender()) {		}		// Check insurance		if (dv == 1) {			int decksNUM = d.decksNUM;			if (decksNUM == 1 && tc(d) >= 1.4d) return "Insurance";			else if (decksNUM == 2 && tc(d) >= 2.4d) return "Insurance";			else if (decksNUM == 3 && tc(d) >= 2.7d) return "Insurance";			else if (decksNUM >= 4 && tc(d) > 3.0d) return "Insurance";		}		// Check pair		if (sv != 0) {			if (!BlackJackGame.rules.isDAS()) {		// double not allowed after split				switch (sv) {					case 1: 							if (dv == 7 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -7) return "Hit";						else if (dv == 10 && trueCount < -8) return "Hit";						else if (dv == 1 && trueCount < -3) return "Hit";						return "Split";					case 2:						if (dv == 2 && trueCount < 7) return "Hit";						else if (dv == 3 && trueCount < 3) return "Hit";						else if (dv == 4 && trueCount < 0) return "Hit";						else if (dv == 5 && trueCount < -4) return "Hit";						else if (dv == 6 && trueCount < -9) return "Hit";						else if (dv == 1 || dv > 7) return "Hit";						return "Split";					case 3:						if (dv == 2 && trueCount < 8) return "Hit";						else if (dv == 3 && trueCount < 3) return "Hit";						else if (dv == 4 && trueCount < 0) return "Hit";						else if (dv == 5 && trueCount < -2) return "Hit";						else if (dv == 6 && trueCount < -9) return "Hit";						else if (dv == 1 || dv > 7) return "Hit"; 						return "Split";					case 4:					case 5:						break;					case 6:						if (dv == 2 && trueCount < 2) return "Hit";						else if (dv == 3 && trueCount < 0) return "Hit";						else if (dv == 4 && trueCount < -3) return "Hit";						else if (dv == 5 && trueCount < -5) return "Hit";						else if (dv == 6 && trueCount < -7) return "Hit";						else if (dv == 1 || dv > 6) return "Hit";						return "Split";					case 7:						if (dv == 2 && trueCount < -9) return "Hit";						else if (dv > 2 && dv < 8) return "Split";						else if (dv == 1 || dv > 7) return "Hit"; 						return "Split";					case 8:						if (dv == 10 && trueCount >= 6) return "Hit";						return "Split";					case 9:						if (dv == 1 && trueCount < 3) return "Hit";						else if (dv == 2 && trueCount < 0) return "Hit";						else if (dv == 3 && trueCount < -2) return "Hit";						else if (dv == 4 && trueCount < -3) return "Hit";						else if ((dv == 5 || dv == 6) && trueCount < -4) return "Hit";						else if (dv == 7 && trueCount < 6) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -9) return "Hit";						else if (dv == 10) return "Stand"; 						return "Split";					default:	// 10						if (dv == 2) return "Stand";						else if (dv == 3 && trueCount < 8) return "Hit";						else if (dv == 4 && trueCount < 6) return "Hit";						else if (dv == 5 && trueCount < 5) return "Hit";						else if (dv == 6 && trueCount < 4) return "Hit";						else if (dv == 1 || dv > 6) return "Stand";						return "Split";				}			}			else {			// DAS - double after split is allowed				switch (sv) {					case 1: 							if (dv == 7 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -7) return "Hit";						else if (dv == 10 && trueCount < -8) return "Hit";						else if (dv == 1 && trueCount < -3) return "Hit";						return "Split";					case 2:						if (dv == 2 && trueCount < -3) return "Hit";						else if (dv == 3 && trueCount < -5) return "Hit";						else if (dv == 4 && trueCount < -7) return "Hit";						else if (dv == 5 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < 5) return "Hit";						else if (dv == 1 || dv > 8) return "Hit";						return "Split";					case 3:						if (dv == 2 && trueCount < -0) return "Hit";						else if (dv == 3 && trueCount < -4) return "Hit";						else if (dv == 4 && trueCount < -7) return "Hit";						else if (dv == 5 && trueCount < -9) return "Hit";						else if (dv == 8 && trueCount < 4) return "Hit";						else if (dv == 1 || dv > 8) return "Hit";						return "Split";					case 4:						if (dv == 2) return "Hit";						else if (dv == 3 && trueCount < 6) return "Hit";						else if (dv == 4 && trueCount < 1) return "Hit";						else if (dv == 5 && trueCount < -1) return "Hit";						else if (dv == 6 && trueCount < -4) return "Hit";						else if (dv == 1 || dv > 6) return "Hit";						return "Split";					case 5:						break;					case 6:						if (dv == 2 && trueCount < -1) return "Hit";						else if (dv == 3 && trueCount < -4) return "Hit";						else if (dv == 4 && trueCount < -6) return "Hit";						else if (dv == 5 && trueCount < -8) return "Hit";						else if (dv == 6 && trueCount < -10) return "Hit";						else if (dv == 1 || dv > 6) return "Hit";						return "Split";					case 7:						if (dv == 2 && trueCount < -9) return "Hit";						else if (dv > 2 && dv < 8) return "Split";						else if (dv == 8 && trueCount < 5) return "Hit";						else if (dv == 1 || dv > 8) return "Hit"; 						return "Split";					case 8:						if (dv == 10 && trueCount >= 8) return "Hit";						return "Split";					case 9:						if (dv == 1 && trueCount < 3) return "Hit";						else if (dv == 2 && trueCount < -2) return "Hit";						else if (dv == 3 && trueCount < -3) return "Hit";						else if (dv == 4 && trueCount < -5) return "Hit";						else if ((dv == 5 || dv == 6) && trueCount < -6) return "Hit";						else if (dv == 7 && trueCount < 3) return "Hit";						else if (dv == 8 && trueCount < -8) return "Hit";						else if (dv == 9 && trueCount < -9) return "Hit";						else if (dv == 10) return "Stand"; 						return "Split";					default:	// 10						if (dv == 2) return "Stand";						else if (dv == 3 && trueCount < 8) return "Hit";						else if (dv == 4 && trueCount < 6) return "Hit";						else if (dv == 5 && trueCount < 5) return "Hit";						else if (dv == 6 && trueCount < 4) return "Hit";						else if (dv == 1 || dv > 6) return "Stand";						return "Split";				}			}		}		else if (soft) {			switch (v) {				case 20: 					if (dv == 2 && trueCount < 10) return "Hit";					else if (dv == 3 && trueCount < 8) return "Hit";					else if (dv == 4 && trueCount < 6) return "Hit";					else if (dv == 5 && trueCount < 5) return "Hit";					else if (dv == 6 && trueCount < 4) return "Hit";					else if (dv == 1 || dv > 6) return "Stand";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 19:					if (dv == 2 && trueCount < 8) return "Hit";					else if (dv == 3 && trueCount < 5) return "Hit";					else if (dv == 4 && trueCount < 3) return "Hit";					else if (dv == 5 && trueCount < 1) return "Hit";					else if (dv == 6 && trueCount < 1) return "Hit";					else if (dv == 1 || dv > 6) return "Stand";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 18:					if (BlackJackGame.rules.isDOA()) {											if (dv == 2 && trueCount < 0) return "Stand";						else if (dv == 3 && trueCount < -2) return "Stand";						else if (dv == 4 && trueCount < -6) return "Stand";						else if (dv == 5 && trueCount < -8) return "Stand";						else if (dv == 6 && trueCount < -10) return "Stand";						else if (dv == 7 || dv == 8) return "Stand"; 						else if (dv == 9 || dv == 10) return "Hit";						else if (dv == 1 && trueCount < 1) return "Hit";						return "Double down";					}					else {						if (dv > 1 && dv < 9) return "Stand";						else if (dv == 9 || dv == 10) return "Hit";						else if (trueCount < 1) return "Hit";						return "Stand"; 					}				case 17:					if (dv == 2 && trueCount < 1) return "Hit";					else if (dv == 3 && trueCount < -3) return "Hit";					else if (dv == 4 && trueCount < -7) return "Hit";					else if (dv == 5 && trueCount < -10) return "Hit";					else if (dv == 6) {						if (BlackJackGame.rules.isDOA()) return "Double down";						else return "Hit";						}					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 16:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 4) return "Hit";					else if (dv == 4 && trueCount < -2) return "Hit";					else if (dv == 5 && trueCount < -6) return "Hit";					else if (dv == 6) {						if (BlackJackGame.rules.isDOA()) return "Double down";						else return "Hit";						}					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 15:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 7) return "Hit";					else if (dv == 4 && trueCount < 0) return "Hit";					else if (dv == 5 && trueCount < -4) return "Hit"; 					else if (dv == 6 && trueCount < -9) return "Hit";					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 14:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 7) return "Hit";					else if (dv == 4 && trueCount < 1) return "Hit";					else if (dv == 5 && trueCount < -1) return "Hit"; 					else if (dv == 6 && trueCount < -4) return "Hit";					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";				case 13:					if (dv == 2) return "Hit";					else if (dv == 3 && trueCount < 7) return "Hit";					else if (dv == 4 && trueCount < 3) return "Hit";					else if (dv == 5 && trueCount < 0) return "Hit"; 					else if (dv == 6 && trueCount < -1) return "Hit";					else if (dv == 1 || dv > 6) return "Hit";					if (BlackJackGame.rules.isDOA())						return "Double down";					else return "Stand";									default:					break;			}		}		else if (v == 20 || v == 19 || v == 18) return "Stand";		else if (v == 17) {			if (dv == 1 && trueCount < -6) return "Hit";			return "Stand";		}		else if (v == 16) {			if (dv == 2 && trueCount < -8) return "Hit";			else if (dv == 3 && trueCount < -10) return "Hit";			else if (dv > 3 && dv < 7) return "Stand";			else if (dv == 7 && trueCount< 9) return "Hit";			else if (dv == 8 && trueCount < 7) return "Hit";			else if (dv == 9 && trueCount < 5) return "Hit";			else if (dv == 10 && trueCount < 0) return "Hit";			else if (dv == 1 && trueCount < 8) return "Hit";			return "Stand";		}		else if (v == 15) {			if (dv == 2 && trueCount < -5) return "Hit";			else if (dv == 3 && trueCount < -6) return "Hit";			else if (dv == 4 && trueCount < -7) return "Hit";			else if ((dv == 5 || dv == 6) && trueCount < -9) return "Hit";			else if ((dv == 7 || dv == 8) && trueCount < 10) return "Hit";			else if (dv == 9 && trueCount < 8) return "Hit";			else if (dv == 10 && trueCount < 4) return "Hit";			else if (dv == 1 && trueCount < 10) return "Hit";			return "Stand"; 		}		else if (v == 14) {			if (dv == 2 && trueCount < -3) return "Hit";			else if (dv == 3 && trueCount < -4) return "Hit";			else if (dv == 4 && trueCount < -6) return "Hit";			else if ((dv == 5 || dv == 6) && trueCount < -7) return "Hit";  			else if (dv == 1 || dv > 6) return "Hit";			return "Stand";		}		else if (v == 13) {			if (dv == 2 && trueCount < 0) return "Hit";			else if (dv == 3 && trueCount < -1) return "Hit";			else if (dv == 4 && trueCount < -3) return "Hit";			else if ((dv == 5 || dv == 6) && trueCount < -4) return "Hit";  			else if (dv == 1 || dv > 6) return "Hit";			return "Stand";						}		else if (v == 12) {			if (dv == 2 && trueCount < 3) return "Hit";			else if (dv == 3 && trueCount < 2) return "Hit";			else if (dv == 4 && trueCount < 0) return "Hit";			else if (dv == 5 && trueCount < -1) return "Hit";			else if (dv == 6 && trueCount < 0) return "Hit";  			else if (dv == 1 || dv > 6) return "Hit";			return "Stand";		}		else if (v == 11) {			if (dv > 1 && dv < 7) return "Double down";			else if (dv == 7 && trueCount < -9) return "Hit";			else if (dv == 8 && trueCount < -6) return "Hit";			else if ((dv == 9 || dv == 10) && trueCount < -4) return "Hit";			else if (dv == 1 && trueCount < 1) return "Hit"; 			return "Double down";		}		else if (v == 10) {			if (dv == 2 && trueCount < -8) return "Hit";			else if (dv == 3 && trueCount < -9) return "Hit";			else if (dv == 4 && trueCount < -10) return "Hit";			else if (dv == 5 || dv ==  6) return "Double down";			else if (dv == 7 && trueCount < -6) return "Hit";			else if (dv == 8 && trueCount < -4) return "Hit";			else if (dv == 9 && trueCount < -1) return "Hit";			else if ((dv == 1 || dv == 10) && trueCount < 4) return "Hit";			return "Double down";   		}		else if (v == 9) {			if (dv == 2 && trueCount < 1) return "Hit";			else if (dv == 3 && trueCount < 0) return "Hit";			else if (dv == 4 && trueCount < -2) return "Hit";			else if (dv == 5 && trueCount < -4) return "Hit";			else if (dv == 6 && trueCount < -6) return "Hit";			else if (dv == 7 && trueCount < 3) return "Hit";			else if (dv == 8 && trueCount < 7) return "Hit";			else if (dv == 1 || dv > 8) return "Hit";			if (BlackJackGame.rules.isDOA())				return "Double down";			else return "Stand";					}		else if (v == 8) {			if (dv == 2) return "HIt";			else if (dv == 3 && trueCount < 9) return "Hit";			else if (dv == 4 && trueCount < 5) return "Hit";			else if (dv == 5 && trueCount < 3) return "Hit";			else if (dv == 6 && trueCount < 1) return "Hit";			else if (dv == 1 || dv > 6) return "Hit";			if (BlackJackGame.rules.isDOA())				return "Double down";			else return "Stand";			 		}		else if (v == 7) {			if (dv > 1 && dv < 5) return "Hit";			else if ((dv == 5 || dv == 6) && trueCount < 9) return "Hit";			else if (dv == 1 || dv > 6) return "Hit";			if (BlackJackGame.rules.isDOA())				return "Double down";			else return "Stand";			}		else if (dv == 6 || dv == 5) return "Hit";				return super.updateBasic(trueCount,d,currentHand,dealersHand);	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return true; }	protected boolean isDoubleChart() { return true; }	protected boolean isSoftChart() { return true; }}