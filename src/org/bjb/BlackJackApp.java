package org.bjb;import java.applet.*;import java.awt.*;import java.awt.event.*;import java.awt.geom.GeneralPath;import java.awt.image.BufferedImage;import java.io.InputStream;import java.lang.reflect.InvocationTargetException;import javax.imageio.ImageIO;import javax.swing.*;import com.bric.plaf.*;public class BlackJackApp extends JApplet implements ActionListener {	static JApplet applet = null;	static BlackJackGame game = null;//	protected java.util.Vector buttons = new java.util.Vector();	private static BlackJackApp instance = null;	private Container savedContentPane = null;	static final Dimension preferredSize = new Dimension(725,700);	static final Dimension minimumSize = new Dimension(725,700);	static final JPanel playingArea = new PlayingArea();	static final JWindow statusArea = new JWindow();	static final JTextField decks = new JTextField(4);	static final JTextField currCard = new JTextField(4);	static final JTextField cutCard = new JTextField(4);	static final JTextField roundNum = new JTextField(6);	static final JTextField elapsedTime = new JTextField(6);	static JButton playBtn = null;	static JButton ffBtn = null;	static final JButton standBtn = new JButton("Stand");	static final JButton hitBtn = new JButton("Hit");	static final JButton splitBtn = new JButton("Split");	static final JButton dblBtn = new JButton("Double down");	static final JButton wongInBtn = new JButton("Wong in");	static final JButton resetBtn = new JButton("Reset");	static final JButton wongOutBtn = new JButton("Wong out");//	static final JButton insureBtn = new JButton("Insurance");	static final JButton surrenderBtn = new JButton("Surrender");	static final JButton chartBtn = new JButton("Chart");	static final JButton prefs = new JButton("Preferences");	static final JButton tips = new JButton("Tips");//	static final JButton simulations = new JButton("Simulations");	static final JButton quitBtn = new JButton("Quit");	static private JButton defaultBtn = null;	static final Preferences preferences = new Preferences(new JFrame(""),true);	static final Color lightBlue = new Color(0xccccff);	static ChartOver chartArea = null;	static InfoOver infoArea = null;	static ExitOver exitArea = null;	static SimOver simArea = null;	AudioClip shuffle = null,blackjack = null,draw = null,drop = null,pop = null;	AudioClip bust = null,dealer_bj = null, thanks = null;	public static final Color teal = new Color(0x8080);	private static int correct = 0, incorrect = 0;		static OSXApplication osxapp = null;	static Object EFFECT_LOCK = new Object();	static int APP_WIDTH;	static int APP_HEIGHT;	private final Object LOGO_LOCK = new Object();		public static void main(String[] args) {		try {			if (System.getProperty("os.name").equals("Mac OS X")) 				UIManager.setLookAndFeel("ch.randelshofer.quaqua.QuaquaLookAndFeel");			else  				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());		} catch (Exception e) {		}		applet = new BlackJackApp();  		java.net.URL where = BlackJackApp.class.getResource("sounds/shuffle.wav"); 		((BlackJackApp)applet).setShuffle(Applet.newAudioClip(where));			where = BlackJackApp.class.getResource("sounds/register.wav");		((BlackJackApp)applet).setBlackjack(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/draw_card.wav");		((BlackJackApp)applet).setDraw(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/drop.wav");		((BlackJackApp)applet).setDrop(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/pop.wav");		((BlackJackApp)applet).setPlayerBust(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/game_over.wav");		((BlackJackApp)applet).setDealerBlackjack(Applet.newAudioClip(where));		where = BlackJackApp.class.getResource("sounds/thanks_for_playing.wav");		((BlackJackApp)applet).setThanks(Applet.newAudioClip(where));		if (System.getProperty("os.name").equals("Mac OS X")) 			OSXApplication.handlePreferences();		else preferences.setVisible(true);	    java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userRoot().node("BlackJackApp");		JFrame f = new JFrame("BlackJack Blastoff");		f.getContentPane().add(applet);		f.addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				System.exit(0);			}		});//		f.setUndecorated(true);		f.setLocation(0,0);//		f.setSize(700,700);//		f.setPreferredSize(preferredSize);//		f.setMinimumSize(minimumSize);		f.setResizable(true);		f.pack();		BlackJackApp.positionWindow(f);		f.setVisible(true);			BlackJackApp.setDecks(prefs.getInt("decks",1));		BlackJackApp.setPlayers(prefs.getInt("players",0));		game.setGameOver(false);		BlackJackApp.setDealsUp(prefs.getBoolean("dealup",false));	}		public BlackJackApp() {		// Create a BlackJackGame object ...				game = new BlackJackGame(preferences,decks,playingArea,false);		EffectsLocker.init();			// Make sure this is primed before we need it		chartArea = new ChartOver();		infoArea = new InfoOver();		exitArea = new ExitOver();		simArea = new SimOver();		if (System.getProperty("os.name").equals("Mac OS X")) {			osxapp = new OSXApplication();					}		getContentPane().setBackground(teal);		Dimension tmp = Toolkit.getDefaultToolkit().getScreenSize();		GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();		GraphicsDevice d = e.getDefaultScreenDevice();		GraphicsConfiguration config= d.getDefaultConfiguration();        Insets insets =  Toolkit.getDefaultToolkit().getScreenInsets(config);        APP_WIDTH = Math.min((int)tmp.getWidth(),1024);        APP_HEIGHT = Math.min((int)tmp.getHeight()-(insets.bottom+insets.top)-60,768);        Dimension dim = new Dimension(APP_WIDTH,APP_HEIGHT);		setSize((int)dim.getWidth(),(int)dim.getHeight());		setPreferredSize(dim);		setMinimumSize(dim);		        GridBagConstraints c = new GridBagConstraints();        GridBagLayout gbl = new GridBagLayout(); 		getContentPane().setLayout(gbl); 		c.gridwidth = 12; 		c.gridheight = 10; 		c.anchor = GridBagConstraints.NORTH; 		c.insets = insets(0,0,0,0);//  		playingArea.setBorder(BorderFactory.createLineBorder(Color.black)); 		gbl.setConstraints(playingArea,c); 		getContentPane().add(playingArea);//		c.anchor = GridBagConstraints.WEST; 		c.insets = insets(3,3,0,0);// 		c.gridheight = 1;//        c.gridwidth = 3;        c.gridy = 12; 		c.gridx = 4;		JPanel moButtons = new JPanel();		// mouse over buttons		moButtons.setBackground(teal);		Dimension moSz = new Dimension(simArea.getWidth()*4+4*3,simArea.getHeight());		moButtons.setSize(moSz);		moButtons.setPreferredSize(moSz);		moButtons.setMinimumSize(moSz);        GridBagConstraints moc = new GridBagConstraints(); //       moc.insets = insets(3,3,0,0);        GridBagLayout mogbl = new GridBagLayout(); 		moButtons.setLayout(mogbl);		moButtons.add(simArea,moc);		moc.gridx = 1;		moButtons.add(chartArea,moc);		moc.gridx = 2;		moButtons.add(infoArea,moc);		moc.gridx = 3;		moButtons.add(exitArea,moc);		c.gridwidth = 8;		c.gridheight = 3;		c.anchor = GridBagConstraints.EAST;/* 		c.gridwidth = 2; 		c.gridheight = 3; 		c.anchor = c.EAST; 		getContentPane().add(chartArea,c);		c.gridx = 10; 		getContentPane().add(infoArea,c);*/		getContentPane().add(moButtons,c);		c.anchor = GridBagConstraints.WEST;				// Game buttons		c.gridx = 0;		c.gridheight = 2;		c.gridwidth = 1;		JPanel buttons = new JPanel(new GridBagLayout());		buttons.setBackground(teal);		GridBagConstraints bc = new GridBagConstraints();		playBtn = new PlayButton();		playBtn.setBackground(Color.white);		getRootPane().setDefaultButton((JButton)playBtn);		playBtn.addActionListener(this);		bc.gridx = 0;bc.gridy = 0;		bc.weightx = 1; bc.weighty = 1;		bc.fill = GridBagConstraints.BOTH;		buttons.add(playBtn,bc);		bc.gridy = 1;		ffBtn = new FFFButton();		ffBtn.setBackground(Color.white);		ffBtn.addActionListener(this);		buttons.add(ffBtn,bc);		getContentPane().add(buttons,c);		c.gridheight = 1;		c.gridwidth = 9;		c.gridx = 1;//		JPanel g_buttons = new JPanel(new GridBagLayout());		JPanel g_buttons = new JPanel(new GridLayout());		g_buttons.setBackground(teal);		GridBagConstraints gc = new GridBagConstraints();//		playBtn.setBackground(Color.white);//		playBtn.addActionListener(this);/*		playBtn.setOpaque(false);		playBtn.putClientProperty("JButton.segmentHorizontalPosition","first");		playBtn.putClientProperty("JButton.segmentVerticalPosition","only");		playBtn.setUI(new BevelButtonUI(playBtn));		playBtn.setFont(UIManager.getFont("Button.font"));		getRootPane().setDefaultButton((JButton)playBtn);		playBtn.addActionListener(this);		gc.gridx = 0;gc.gridy = 0;		gc.weightx = 1; gc.weighty = 1;		gc.fill = GridBagConstraints.BOTH;		g_buttons.add(playBtn,gc);*///		g_buttons.add(playBtn);		standBtn.setBackground(Color.white);		standBtn.setOpaque(false);		standBtn.putClientProperty("JButton.segmentHorizontalPosition","first");		standBtn.putClientProperty("JButton.segmentVerticalPosition","only");		standBtn.setUI(new BevelButtonUI());		standBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 1;		g_buttons.add(standBtn);//		buttons.add(button);		standBtn.addActionListener(this);//		g_buttons.add(standBtn);		hitBtn.setBackground(Color.white);		hitBtn.setOpaque(false);		hitBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		hitBtn.putClientProperty("JButton.segmentVerticalPosition","only");		hitBtn.setUI(new BevelButtonUI());		hitBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 2;		g_buttons.add(hitBtn);		hitBtn.addActionListener(this);//		g_buttons.add(hitBtn);		splitBtn.setBackground(Color.white);		splitBtn.setOpaque(false);		splitBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		splitBtn.putClientProperty("JButton.segmentVerticalPosition","only");		splitBtn.setUI(new BevelButtonUI());		splitBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 3;		g_buttons.add(splitBtn);		splitBtn.addActionListener(this);		//		g_buttons.add(splitBtn);		dblBtn.setBackground(Color.white);		dblBtn.setOpaque(false);		dblBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		dblBtn.putClientProperty("JButton.segmentVerticalPosition","only");		dblBtn.setUI(new BevelButtonUI());		dblBtn.setFont(UIManager.getFont("Button.font"));		gc.gridx = 4;		g_buttons.add(dblBtn);		dblBtn.addActionListener(this);		//		dblBtn.setBackground(Color.white);//		g_buttons.add(dblBtn,gc);//		insureBtn.setBackground(Color.white);//		insureBtn.setOpaque(false);//		insureBtn.addActionListener(this);//		insureBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");//		insureBtn.putClientProperty("JButton.segmentVerticalPosition","only");//		insureBtn.setUI(new BevelButtonUI());//		insureBtn.setFont(UIManager.getFont("Button.font"));//		g_buttons.add(insureBtn);		surrenderBtn.setBackground(Color.white);		surrenderBtn.setOpaque(false);		surrenderBtn.addActionListener(this);		surrenderBtn.putClientProperty("JButton.segmentHorizontalPosition","last");		surrenderBtn.putClientProperty("JButton.segmentVerticalPosition","only");		surrenderBtn.setUI(new BevelButtonUI());		surrenderBtn.setFont(UIManager.getFont("Button.font"));		g_buttons.add(surrenderBtn);		gbl.setConstraints(g_buttons,c);		getContentPane().add(g_buttons);		c.fill = GridBagConstraints.NONE;					// Control buttons		c.gridx = 1;		c.gridy = 13;		JPanel c_buttons = new JPanel();		c_buttons.setBackground(teal);		chartBtn.setBackground(Color.white);		chartBtn.addActionListener(this);//		c_buttons.add(chartBtn);//		prefs.setBackground(Color.white);//		prefs.addActionListener(this);//		c_buttons.add(prefs);		JPanel w_buttons = new JPanel(new GridLayout());		w_buttons.setBackground(teal);		wongInBtn.setBackground(Color.white);		wongInBtn.setOpaque(false);		wongInBtn.putClientProperty("JButton.segmentHorizontalPosition","first");		wongInBtn.putClientProperty("JButton.segmentVerticalPosition","only");		wongInBtn.setUI(new BevelButtonUI());		wongInBtn.setFont(UIManager.getFont("Button.font"));		wongInBtn.addActionListener(this);		w_buttons.add(wongInBtn);		resetBtn.setBackground(Color.white);		resetBtn.setOpaque(false);		resetBtn.putClientProperty("JButton.segmentHorizontalPosition","middle");		resetBtn.putClientProperty("JButton.segmentVerticalPosition","only");		resetBtn.setUI(new BevelButtonUI());		resetBtn.setFont(UIManager.getFont("Button.font"));		resetBtn.addActionListener(this);		w_buttons.add(resetBtn);		wongOutBtn.setBackground(Color.white);		wongOutBtn.setOpaque(false);		wongOutBtn.putClientProperty("JButton.segmentHorizontalPosition","last");		wongOutBtn.putClientProperty("JButton.segmentVerticalPosition","only");			wongOutBtn.setUI(new BevelButtonUI());		wongOutBtn.setFont(UIManager.getFont("Button.font"));		wongOutBtn.addActionListener(this);		w_buttons.add(wongOutBtn);		c_buttons.add(w_buttons);		tips.setBackground(Color.white);		tips.addActionListener(this);		c_buttons.add(tips);//		simulations.setBackground(Color.white);//		simulations.addActionListener(this);//		c_buttons.add(simulations);		quitBtn.setBackground(Color.white);		quitBtn.addActionListener(this);//		c_buttons.add(quitBtn);		gbl.setConstraints(c_buttons,c);		getContentPane().add(c_buttons);				Dimension pDim = new Dimension((int)dim.getWidth(),(int)dim.getHeight()-g_buttons.getHeight()-c_buttons.getHeight()-75);		playingArea.setSize((int)pDim.getWidth(),(int)pDim.getHeight());		playingArea.setPreferredSize(pDim);		playingArea.setMinimumSize(pDim);				instance = this;		// Initialize menus 		JMenuBar menubar = getJMenuBar();				// and play it!//		try { game.play(); }//		catch (IOException ioex) { ioex.printStackTrace(); }	}	public void setShuffle(AudioClip shuffle) {		this.shuffle = shuffle;	}		public void setBlackjack(AudioClip blackjack) {		this.blackjack = blackjack;	}		public void setDraw(AudioClip draw) {		this.draw = draw;	}		public void setDrop(AudioClip drop) {		this.drop = drop;	}		public void setPlayerBust(AudioClip pop) {		this.pop = pop;	}		public void setDealerBlackjack(AudioClip dealer_bj) {		this.dealer_bj = dealer_bj;	}		public void setThanks(AudioClip thanks) {		this.thanks = thanks;	} 		public static void playShuffle() {		if (instance != null) 			try {				if (SwingUtilities.isEventDispatchThread())					instance.shuffle.play();					else SwingUtilities.invokeAndWait(new Runnable() {					public void run() {						instance.shuffle.play();										}				});			}			catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }			catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void playBlackjack() {		if (instance != null) 			try {				if (SwingUtilities.isEventDispatchThread())					instance.blackjack.play();				else SwingUtilities.invokeAndWait(new Runnable() {					public void run() {						instance.blackjack.play();					}				});			}			catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }			catch (InterruptedException iex) { iex.printStackTrace(); }	}			public static void playDraw() {		if (instance != null) 			try {				if (SwingUtilities.isEventDispatchThread())					instance.draw.play();				else SwingUtilities.invokeAndWait(new Runnable() {					public void run() {						instance.draw.play();					}				});			}			catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }			catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void playDrop() {		try {			if (SwingUtilities.isEventDispatchThread())				instance.drop.play();			else 				SwingUtilities.invokeAndWait(new Runnable() {					public void run() {						instance.drop.play();					}				});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void playPlayerBust() {		try {			if (SwingUtilities.isEventDispatchThread())				instance.pop.play();			else SwingUtilities.invokeAndWait(new Runnable() {				public void run() {					instance.pop.play();				}			});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void playDealerBust() {		try {			if (SwingUtilities.isEventDispatchThread())				instance.pop.play();			else SwingUtilities.invokeAndWait(new Runnable() {				public void run() {					instance.pop.play();				}			});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void playDealerBJ() {		try {			if (SwingUtilities.isEventDispatchThread())				instance.dealer_bj.play();			else SwingUtilities.invokeAndWait(new Runnable() {				public void run() {					instance.dealer_bj.play();				}			});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void playThanks() {		try {			if (SwingUtilities.isEventDispatchThread())				instance.thanks.play();			else SwingUtilities.invokeAndWait(new Runnable() {				public void run() {					instance.thanks.play();				}			});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void setDefault(final String button) {		SwingUtilities.invokeLater(new Runnable() {			public void run() {				if (button.equals("Play")) {					defaultBtn = playBtn;					instance.getRootPane().setDefaultButton(playBtn);					playBtn.requestFocus();				}				else if (button.equals("Stand")) {					defaultBtn = standBtn;					instance.getRootPane().setDefaultButton(standBtn);					standBtn.requestFocus();				}				else if (button.equals("Hit")) {					defaultBtn = hitBtn;					instance.getRootPane().setDefaultButton(hitBtn);					hitBtn.requestFocus();				}				else if (button.equals("Double down")) {					defaultBtn = dblBtn;					instance.getRootPane().setDefaultButton(dblBtn);					dblBtn.requestFocus();				}/*				else if (button.equals("Insurance")) {					instance.getRootPane().setDefaultButton(insureBtn);					insureBtn.requestFocus();				}*/				else if (button.equals("Split")) {					defaultBtn = splitBtn;					instance.getRootPane().setDefaultButton(splitBtn);					splitBtn.requestFocus();				}							}		});	}		public static void setDoubleEnabled(final boolean enabled) {		try {			SwingUtilities.invokeAndWait(new Runnable() {				public void run() {					dblBtn.setEnabled(enabled);				}			});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }	}		public static void setSplitEnabled(final boolean enabled) {		try {			SwingUtilities.invokeAndWait(new Runnable() {				public void run() {					splitBtn.setEnabled(enabled);				}			});		}		catch (InvocationTargetException ite) { ite.getTargetException().printStackTrace(); }		catch (InterruptedException iex) { iex.printStackTrace(); }			}		public static void guiDisable() {		SwingUtilities.invokeLater(new Runnable() {			public void run() {				standBtn.setEnabled(false);				hitBtn.setEnabled(false);				dblBtn.setEnabled(false);//				insureBtn.setEnabled(false);				splitBtn.setEnabled(false);				surrenderBtn.setEnabled(false);							}		});	}		public static void guiEnable(final boolean isDouble,final boolean isSplit) {		SwingUtilities.invokeLater(new Runnable() {			public void run() {				standBtn.setEnabled(true);				hitBtn.setEnabled(true);				if (isDouble)					dblBtn.setEnabled(true);//				insureBtn.setEnabled(true);				if (isSplit)					splitBtn.setEnabled(true);				if (BlackJackApp.canSurrender())					surrenderBtn.setEnabled(true);						}		});	}		public static void playBtnReset() { 		SwingUtilities.invokeLater(new Runnable() {			public void run() { ((PlayButton)playBtn).reset(); }		});	}	public static void processChart() {		getGame().processChart();	}		static void setDecks(int decksNUM) { 		decks.setText(new Integer(decksNUM).toString());		((PlayingArea)playingArea).clear();		BlackJackApp.game = new BlackJackGame(preferences,decks,playingArea,false);	}		public static int getDecks() {		return game.decksNUM;	}		public static BlackJackGame getGame() { return game; }		static boolean canSurrender() { return getGame().canSurrender(); }		static void setPlayers(int playersNUM) {		getGame().setPlayers(playersNUM,game.getDeck().getDecksNum());	}		static void setDealsUp(boolean dealsup) {		getGame().setDealsUp(dealsup);	}	public void play() {		game.setGameOver(false);		final SwingWorker worker = new SwingWorker() {			public Object construct() {				try {					SwingUtilities.invokeAndWait(new Runnable() {						public void run() {							((PlayingArea)playingArea).clear();							game.showBalances();						}					});				}				catch (Throwable tossed) { tossed.printStackTrace(); }								game.initialDeal(); 				return null;			}		};		worker.start();			}		public void actionPerformed(ActionEvent evt) {		String cmd = evt.getActionCommand();		System.out.println("BlackJackApp actionPerformed " + cmd + " game over is " + game.isGameOver());		if (cmd.equals("Play")) {			if (!game.isGameOver()) {//				Toolkit.getDefaultToolkit().beep();				return;			}			play();		}		else if (cmd.equals("Hit")) {//			System.out.println("BJA Hit enabled is " + hitBtn.isEnabled());			if (!hitBtn.isEnabled()) return;			if (!game.isGameOver()) {				final JButton srcBtn = (JButton)evt.getSource();				final SwingWorker worker = new SwingWorker() {					public Object construct() {						updateStats(srcBtn.isDefaultButton());						if (!srcBtn.isDefaultButton()) {									if (!org.bjb.Preferences.isDefaultButtons()) {//								System.out.println("wrong button " + hitBtn.getLabel() + " correct button " + defaultBtn.getLabel());								hitBtn.putClientProperty("flash", Color.red);								hitBtn.putClientProperty("flash.count", new Integer(8));								hitBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								hitBtn.repaint();								defaultBtn.putClientProperty("flash",teal);								defaultBtn.putClientProperty("flash.count", new Integer(8));								defaultBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								defaultBtn.repaint();							}						}//						synchronized(EFFECT_LOCK) {							if (!game.hit())								game.nextPlayer();							playBtn.requestFocus();							return null;//						}					}				};				worker.start();			}			else playBtn.requestFocus();		}		else if (cmd.equals("Split")) {//			System.out.println("BJA Split enabled is " + splitBtn.isEnabled());			if (!splitBtn.isEnabled()) return;			if (!game.isGameOver()) {				final JButton srcBtn = (JButton)evt.getSource();				final SwingWorker worker = new SwingWorker() {					public Object construct() {						updateStats(srcBtn.isDefaultButton());						if (!srcBtn.isDefaultButton()) {									if (!org.bjb.Preferences.isDefaultButtons()) {//								System.out.println("wrong button " + hitBtn + " correct button " + defaultBtn);								splitBtn.putClientProperty("flash", Color.red);								splitBtn.putClientProperty("flash.count", new Integer(8));								splitBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								splitBtn.repaint();								defaultBtn.putClientProperty("flash",teal);								defaultBtn.putClientProperty("flash.count", new Integer(8));								defaultBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								defaultBtn.repaint();							}						}//						synchronized(EFFECT_LOCK) {							if (!game.split())								game.nextPlayer();							playBtn.requestFocus();							return null;//						}					}				};				worker.start();			}			else playBtn.requestFocus();		}		else if (cmd.equals("Double down")) {//			System.out.println("BJA DD enabled is " + dblBtn.isEnabled());			if (!dblBtn.isEnabled()) return;			if (!game.isGameOver()) {				final JButton srcBtn = (JButton)evt.getSource();				final SwingWorker worker = new SwingWorker() {					public Object construct() {						updateStats(srcBtn.isDefaultButton());						if (!srcBtn.isDefaultButton()) {		// Try to give some time to flash incorrect							if (!org.bjb.Preferences.isDefaultButtons()) {//								System.out.println("wrong button " + hitBtn + " correct button " + defaultBtn);								dblBtn.putClientProperty("flash", Color.red);								dblBtn.putClientProperty("flash.count", new Integer(8));								dblBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								dblBtn.repaint();								defaultBtn.putClientProperty("flash",teal);								defaultBtn.putClientProperty("flash.count", new Integer(8));								defaultBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								defaultBtn.repaint();														}						}//						synchronized(EFFECT_LOCK) {							if (!game.doubleDown())								game.nextPlayer();							playBtn.requestFocus();							return null;//						}					}				};				worker.start();			}			else playBtn.requestFocus();		}		else if (cmd.equals("Stand")) {//			System.out.println("BJA Stand enabled is " + standBtn.isEnabled());			if (!standBtn.isEnabled()) return;			if (!game.isGameOver()) {				final JButton srcBtn = (JButton)evt.getSource();				final SwingWorker worker = new SwingWorker() {					public Object construct() {						updateStats(srcBtn.isDefaultButton());						if (!srcBtn.isDefaultButton()) {									if (!org.bjb.Preferences.isDefaultButtons()) {//								System.out.println("wrong button " + hitBtn + " correct button " + defaultBtn);								standBtn.putClientProperty("flash", Color.red);								standBtn.putClientProperty("flash.count", new Integer(8));								standBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								standBtn.repaint();								defaultBtn.putClientProperty("flash",teal);								defaultBtn.putClientProperty("flash.count", new Integer(8));								defaultBtn.putClientProperty("flash.active",new Boolean(true));								EffectsLocker.acquire();								defaultBtn.repaint();							}						}//						synchronized(EFFECT_LOCK) {							if (!game.stand())								game.nextPlayer();							playBtn.requestFocus();							return null;//						}					}				};				worker.start();			}			else playBtn.requestFocus();		}		else if (cmd.equals("Chart")) {			if (!game.isGameOver())				game.showChart();			playBtn.requestFocus();		}		else if (cmd.equals("Preferences")) {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					preferences.setVisible(true);					playBtn.requestFocus();	// Reset focus so not stuck on pause				}			});		}/*		else if (cmd.equals("Simulations")) {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					Simulation sim = new Simulation(new JFrame(""),true);					sim.setVisible(true);					playBtn.requestFocus();									}			});		}*/		else if (cmd.equals("Tips")) {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					Tip.getViewer().setVisible(true);					playBtn.requestFocus();	// Reset focus so not stuck on pause				}			});		}//		else if (cmd.equals("Simulations"))//			playDealerBust();		else if (cmd.equals("Wong in")) {			System.out.println("Wong in");		}		else if (cmd.equals("Wong out")) {			game.setWongedOut(true);			System.out.println("Wong out");		}		else if (cmd.equals("Reset")) {			System.out.println("Reset pressed");		}		else if (cmd.equals("Quit")) {			playThanks();			synchronized(this) {				try { wait(1500); }				catch (InterruptedException iex) {}			}			System.exit(0);		}	}	private void updateStats(boolean match) {		if (match) correct++;		else {			EffectsLocker.acquire();			incorrect++;			game.incorrect();		}	}		public static int getCorrect() { return correct; }	public static int getIncorrect() { return incorrect; }		public static void splashLogo() {		final Component c = applet.getGlassPane();		SwingUtilities.invokeLater(new Runnable() {			public void run() {				synchronized(instance.LOGO_LOCK) {					splashLogo(c);				}			}		});	}	public static void simulationStrategy(SimulationStrategy sim) {		instance.savedContentPane = instance.getContentPane();		sim.setOpaque(true);		instance.setContentPane(sim);//		instance.add(sim);	}		public static void resetContent() {		instance.setContentPane(instance.savedContentPane);		instance.play();	}		public static void clearLogo() {		System.out.println("BJA clear logo");		SwingUtilities.invokeLater( new Runnable() {			public void run() {				synchronized(instance.LOGO_LOCK) {					System.out.println("BJA EDT clearing code");					Component c = applet.getGlassPane();					((JComponent)c).setOpaque(false);					Graphics2D g2d = (Graphics2D)c.getGraphics();					g2d.setColor(Color.white);					g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.0f));					System.out.println("BJA clearing " + c.getWidth() + " " + c.getHeight());					g2d.fillRect(0,0,c.getWidth(),c.getHeight());				}			}		});	}		private static void splashLogo(Component c) {		System.out.println("BJA splash logo");		Graphics2D g2d = (Graphics2D)c.getGraphics();		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));		g2d.setColor(Color.blue);		g2d.fillOval(c.getWidth()/2-96, c.getHeight()/2-96, 192, 192);		g2d.setStroke(new BasicStroke(2.0f));		int ulx = c.getWidth()/2-96;		int uly = c.getHeight()/2-96;		int cx = ulx+96;		int cy = uly+96;		// Add some background stars		g2d.setColor(Color.white);		for (int i = 1; i < 10; i++) {			int r = (int)(96 * Math.random());			double a= Math.PI*2*Math.random();			int x= cx+(int)(r*Math.cos(a));			int y= cy+(int)(r*Math.sin(a));			g2d.fillOval(x,y,3,3);		}		ImageIcon rocket128 = Card.getIcon("images/rocket-icon-128x128.png");		int x = c.getWidth()/2-64;		int y = c.getHeight()/2-64;		rocket128.paintIcon(c,g2d,x,y);		// Do the spikes		double a;		GeneralPath spike = new GeneralPath();		// 0 		a = 0;		x = cx + 96;		y = cy;		a = Math.PI/32;		int ux = cx+Math.abs((int)(Math.cos(a) * 96));		int uy = cy+Math.abs((int)(Math.sin(a) * 96));		int lx = ux;		int ly = cy - Math.abs((int)(Math.sin(a) * 96));				spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x+125, y);		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);		// pi / 4		a = Math.PI/4;		x = cx + Math.abs((int)(Math.cos(a) * 96));		y = cy - Math.abs((int)(Math.sin(a) * 96));		a = Math.PI/4+Math.PI/32;		ux = cx+Math.abs((int)(Math.cos(a) * 96));		uy = cy-Math.abs((int)(Math.sin(a) * 96));		a = Math.PI/4-Math.PI/32;		lx = cx+Math.abs((int)(Math.cos(a) * 96));		ly = cy-Math.abs((int)(Math.sin(a) * 96)); 		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x+Math.abs((int)(Math.cos(a)*75)), y-Math.abs((int)(Math.sin(a)*75)));		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);		// pi / 2		x = cx;		y = cy - 96;		a = Math.PI/2 - Math.PI/32;		ux = cx-Math.abs((int)(Math.cos(a) * 96));		uy = cy-Math.abs((int)(Math.sin(a) * 96));		lx = cx+Math.abs((int)(Math.cos(a) * 96));		ly = uy;		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x, y-125);		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);		// pi * 3/4		a = Math.PI*3/4;		x = cx - Math.abs((int)(Math.cos(a) * 96));		y = cy - Math.abs((int)(Math.sin(a) * 96));		a = Math.PI*3/4+Math.PI/32;		ux = cx-Math.abs((int)(Math.cos(a) * 96));		uy = cy-Math.abs((int)(Math.sin(a) * 96));		a = Math.PI*3/4-Math.PI/32;		lx = cx-Math.abs((int)(Math.cos(a) * 96));		ly = cy-Math.abs((int)(Math.sin(a) * 96)); 		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x-Math.abs((int)(Math.cos(a)*75)), y-Math.abs((int)(Math.sin(a)*75)));		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);		// pi		x = cx - 96;		y = cy;		a = Math.PI - Math.PI/32;				ux = cx-Math.abs((int)(Math.cos(a) * 96));		uy = cy+Math.abs((int)(Math.sin(a) * 96));		lx = ux;			ly = cy - Math.abs((int)(Math.sin(a) * 96));		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x-125, y);		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);		// 5/4 pi		a = Math.PI*5/4;		x = cx - Math.abs((int)(Math.cos(a) * 96));		y = cy + Math.abs((int)(Math.sin(a) * 96));		a = Math.PI*5/4+Math.PI/32;		ux = cx-Math.abs((int)(Math.cos(a) * 96));		uy = cy+Math.abs((int)(Math.sin(a) * 96));		a = Math.PI*5/4-Math.PI/32;		lx = cx-Math.abs((int)(Math.cos(a) * 96));		ly = cy+Math.abs((int)(Math.sin(a) * 96)); 		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x-Math.abs((int)(Math.cos(a)*75)), y+Math.abs((int)(Math.sin(a)*75)));		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);				// 3/2 pi		x = cx;		y = cy + 96;		a = Math.PI/2 - Math.PI/32;		ux = cx-Math.abs((int)(Math.cos(a) * 96));		uy = cy+Math.abs((int)(Math.sin(a) * 96));		lx = cx+Math.abs((int)(Math.cos(a) * 96));		ly = uy;		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x, y+125);		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);			// 7/4 pi		a = Math.PI*7/4;		x = cx + Math.abs((int)(Math.cos(a) * 96));		y = cy + Math.abs((int)(Math.sin(a) * 96));		a = Math.PI*7/4+Math.PI/32;		ux = cx+Math.abs((int)(Math.cos(a) * 96));		uy = cy+Math.abs((int)(Math.sin(a) * 96));		a = Math.PI*7/4-Math.PI/32;		lx = cx+Math.abs((int)(Math.cos(a) * 96));		ly = cy+Math.abs((int)(Math.sin(a) * 96)); 		spike.moveTo(ux,uy);		spike.quadTo(x,y,lx,ly);		spike.lineTo(x+Math.abs((int)(Math.cos(a)*75)), y+Math.abs((int)(Math.sin(a)*75)));		spike.lineTo(ux, uy);		g2d.setStroke(new BasicStroke(2.0f));		g2d.setColor(Color.black);		g2d.draw(spike);		g2d.setColor(Color.yellow);		g2d.fill(spike);			//		g2d.setColor(Color.black);		g2d.drawOval(ulx, uly, 192, 192);	}		public static void positionWindow(Window w)	{		Dimension sSize = w.getToolkit().getScreenSize();	// Position the window  	 	int sHeight = sSize.height;  	 	int sWidth = sSize.width;  	 	Dimension aSize = w.getSize();  	 	int aHeight = aSize.height;  	 	int aWidth = aSize.width; 	 	w.setLocation((sWidth-aWidth)/2,(sHeight-aHeight)/2);	}		public Insets insets(int t, int l, int b, int r)	{		return new Insets(t,l,b,r);	}}class PlayButton extends JButton implements FocusListener {	public final ImageIcon play = TransparentIcon.getIcon("images/t_play.jpg");	public final ImageIcon playa = TransparentIcon.getIcon("images/t_playa.jpg");	public final ImageIcon playb = TransparentIcon.getIcon("images/t_playb.jpg");	public final ImageIcon pause = TransparentIcon.getIcon("images/t_pause.jpg");	public final ImageIcon pausea = TransparentIcon.getIcon("images/t_pausea.jpg");	public final ImageIcon pauseb = TransparentIcon.getIcon("images/t_pauseb.jpg");	boolean playMode = false;		public PlayButton() {		super("Play");//		setBackground(BlackJackApp.teal);		setOpaque(false);		putClientProperty("JButton.segmentHorizontalPosition","only");		putClientProperty("JButton.segmentVerticalPosition","top");		setUI(new BevelButtonUI());		setIcon(play);//		setDisabledIcon(play);		setFont(UIManager.getFont("Button.font"));		addFocusListener(this);	}		public void focusGained(FocusEvent fev) {		SwingUtilities.invokeLater(new Runnable() {			public void run() {//				if (BlackJackApp.game.isGameOver()) {							setIcon(playa);//					setDisabledIcon(playa);					setSelected(true);					setEnabled(true);					setText("Play");					playMode = true;//				}							}		});	}		public void reset() { //		enable();		focusGained(null); 	}		public void focusLost(FocusEvent fev) {		if (playMode) {			setIcon(pause);			setText("Pause");			playMode = false;		}	}}class DJButton extends JButton {		// debug paint stuff	private final static long serialVersionUID = -1L;	public DJButton(String text) {		super(text);	}		public void repaint() {		new Exception("repaint").printStackTrace();		super.repaint();	}}class FFFButton extends JButton implements FocusListener {	public final ImageIcon fff = TransparentIcon.getIcon("images/t_FFF.jpg");	public final ImageIcon fffa = TransparentIcon.getIcon("images/t_FFFa.jpg");	public final ImageIcon fffb = TransparentIcon.getIcon("images/t_FFFb.jpg");		public FFFButton() {		super("Step");//		setBackground(BlackJackApp.teal);		setOpaque(false);		putClientProperty("JButton.segmentHorizontalPosition","only");		putClientProperty("JButton.segmentVerticalPosition","bottom");		setUI(new BevelButtonUI());		setIcon(fff);		setFont(UIManager.getFont("Button.font"));		addFocusListener(this);	}		public void focusGained(FocusEvent fev) {		setIcon(fffa);//		setBackground(BlackJackApp.teal);//		setDisabledIcon(fffa);	}		public void focusLost(FocusEvent fev) {//		setBackground(Color.white);		setIcon(fff);//		setDisabledIcon(fff);	}}class TransparentIcon {	public static ImageIcon getIcon(String icon) {		InputStream	is = BlackJackApp.class.getResourceAsStream(icon);		try {			BufferedImage img = ImageIO.read(is);			return new ImageIcon(transparent(img));		}		catch (java.io.IOException ioex) { 			ioex.printStackTrace();		}		return null;	}	    private static BufferedImage transparent(BufferedImage bim) {        // make the image to be returned. same size as 'bim' of course. now the type is TYPE_INT_ARGB. This is important, because it means that it is capable of having transparent pixels        BufferedImage bimTransp = new BufferedImage(bim.getWidth(null), bim.getHeight(null),                BufferedImage.TYPE_INT_ARGB);        // get a 'pencil' i.e. a Graphics2D so we can draw some transparent pixels on 'bimTransp'        Graphics2D g2D = (Graphics2D) bimTransp.getGraphics();        // step through every single pixel on 'bim'         for (int y = 0; y < bim.getHeight(); y++) {            for (int x = 0; x < bim.getWidth(); x++) {                // if we find a color of 'transParencyColor' make this pixel transparent                if (bim.getRGB(x, y) == Color.white.getRGB()) {                     //System.out.println("Transparent pixel found!");                    g2D.setComposite(AlphaComposite.Src);                    g2D.setColor(new Color(0,0,0,0));                    g2D.drawRect(x, y, 1, 1);                } else {                    //System.out.println("Not transp");                    g2D.setColor(new Color(bim.getRGB(x, y)));                    g2D.drawRect(x, y, 1, 1);                }            }        }		return bimTransp;    }}	