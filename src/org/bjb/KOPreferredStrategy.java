package org.bjb;public class KOPreferredStrategy extends KORookieStrategy implements UnbalancedStrategy {//	private static final int pivotPoint = 4;		public KOPreferredStrategy(int decksNum) { super(decksNum); }		public String getName() { return "K-O Preferred"; }		public int getBet() {		if (true)			return super.getBet();		switch(decksNum) {			case 1:				if (rc < 2)					return betUnit;				else if (rc == 2)					return betUnit * 2;				else if (rc == 3)					return betUnit * 4;				else return betUnit * 5;			case 2: case 3: case 4: case 5:				if (rc < 1)					return betUnit;				else if (rc == 1)					return betUnit * 2;				else if (rc == 2)					return betUnit * 3;				else if (rc == 3)					return betUnit * 4;				else return betUnit * 5;			case 6: case 7:				if (rc < -4)					return betUnit;				else if (rc < -2)					return betUnit * 2;				else if (rc == -2)					return betUnit * 3;				else if (rc == -1)					return betUnit * 4;				else if (rc == 0)					return betUnit * 5;				else if (rc == 1)					return betUnit * 6;				else if (rc == 2)					return betUnit * 8;				else if (rc == 3)					return betUnit * 9;				else return betUnit * 10;			case 8: 				if (rc < -6)					return betUnit;				else if (rc < -3)					return betUnit * 2;				else if (rc == -3)					return betUnit * 3;				else if (rc == -2)					return betUnit * 4;				else if (rc == -1)					return betUnit * 5;				else if (rc == 0)					return betUnit * 6;				else if (rc == 1)					return betUnit * 7;				else if (rc == 2)					return betUnit * 8;				else if (rc == 3)					return betUnit * 9;				else return betUnit * 10;			default: return super.getBet();		}	}		public boolean insure(Deck d) {		decksNum = d.getDecksNum();		if (getCount() >= 3) return true;		return false;	}				public final String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		decksNum = d.getDecksNum();		int v = currentHand.bestScore();		final int dv = dealersHand.dealersUp();		if (!currentHand.isSoft()) {				switch(v) {				case 16:					if (dv == 9) 						return a(v);						// H16-9 A					if (dv == 10) 							// H16-10 B						return b(v,decksNum);					break;				case 15:					if (dv == 10) {							// H15-10 A						return a(v);					}					break;				case 13:					if (decksNum < 3 && (dv == 2 || dv == 3)) {		// H13-2,3 C						return c();					}					break;				case 12:					if (dv == 2 || dv == 3) {						return a(v);					}					if (decksNum < 3 && (dv > 3 && dv < 7)) {						return c();					}					break;				case 11:					if (dv == 1) {						if (currentHand.canDoubleDown())							return a(v);						else return "Hit";					}					break;				case 10:					if (dv == 10 || dv == 1) {						if (currentHand.canDoubleDown())							return a(v);						else return "Hit";					}					break;				case 9:					if (dv == 2 || dv == 7) {						if (currentHand.canDoubleDown())							return a(v);						else return "Hit";					}					break;				case 8:					if (dv == 5 || dv == 6) {						if (currentHand.canDoubleDown()) 							return a(v);						else return "Hit";					}					break;				// The chart shows a down arrow for the 8 entry				// I'm not sure if that means you should repeat the 8 case for any value less than 8?				// Or assume no action for anything before 8? 				// I am currently assuming no action				default: 					break;			}		}		return super.updateBasic(d,currentHand,dealersHand);	}		private String a(int v) {		if (v <= 11) return a11(v);		if (getCount() >= 4) return "Stand";		return "Hit";	}		private String a11(int v) {		if (getCount() >= 4) return "Double down";		return "Hit";	}		private String b(int v,int decksNum) {//		if (count > getKeyCount())		if (decksNum == 1 && rc >= 2)			return "Stand";		else if (decksNum == 2 && getCount() >= 1)			return "Stand";		else if (decksNum <= 6 && getCount() >= -4)			return "Stand";		else if (decksNum > 6 && getCount() >= -6)			return "Stand";		else return "Hit";			}		private String c() {		if (getCount() > getInitialRunningCount())			return "Stand";		else return "Hit";	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return false; }	protected boolean isDoubleChart() { return false; }	protected boolean isSoftChart() { return false; }}