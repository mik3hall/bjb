package org.bjb;public class KORookieStrategy extends Strategy implements UnbalancedStrategy {	protected int irc = -99;						// Initial running count, if you see this value we have a bug	protected int rc;					// running count	private int multiplier = 3;			// bet increase for better than key count	protected int betUnit = 10;	public KORookieStrategy(int decksNum) { 		super(decksNum); 		rc = getInitialRunningCount();	}		public String getName() { return "K-O Rookie"; }	public boolean isBalanced() { return false; }	public boolean insure(Deck d) { return false; }		public int getBet() {		if (rc > getKeyCount()) return betUnit * multiplier;		return betUnit;	}	public void reset() { 		rc = getInitialRunningCount(); 	}		public void updateCount(Deck d,Card c) { 		int v = c.iValue;		if (v >= 2 && v <= 7) rc += 1;		if (v == 10 || v == 1) rc -= 1;	}	public int getCount() { return rc; }		public int getInitialRunningCount() {		switch (decksNum) {			case 1:				irc = 0;				break;			case 2:				irc = -4;				break;			case 4:				break;		// TODO need this handled			case 6:				irc = -20;				break;			case 8:				irc = -28;				break;			default:				irc = -28;				break;		}			return irc;	}		public int getKeyCount() {		int kc = -99;			// If you see this we have a bug		switch (decksNum) {			case 1:				kc = 2;				break;			case 2:				kc = 1;				break;			case 4:				break;		// TODO need this handled			case 6:				kc = -4;				break;			case 8:				kc = -6;				break;			default:				kc = -6;				break;		}			return kc;	}	// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return false; }	protected boolean isDoubleChart() { return false; }	protected boolean isSoftChart() { return false; }}