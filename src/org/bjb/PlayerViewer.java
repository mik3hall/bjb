package org.bjb;import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.table.AbstractTableModel;public class PlayerViewer extends JFrame {	private final Player p;	private static String[] s = new String[] { "Hi-Lo lite","Hi-Lo","Illustrious 18","K-O Rookie","K-O Preferred","Red Seven Easy","Red Seven","Basic Strategy","Thorp Basic Strategy" };	private static String[] b = new String[] { "two-bet","modified Kelly" };	JRadioButton human = new JRadioButton("Human");	JComboBox<String> strategies = new JComboBox<String>(s);	JComboBox<String> betting = new JComboBox<String>(b);	JTextField count = new JTextField(7);	JTextField rc = new JTextField(7);	JTextField kc = new JTextField(7);	JTextField ev_avg = new JTextField(7);	JTextField tot_wager = new JTextField(7); 	// Create an action    Action canact = new AbstractAction("Cancel") {    	private static final long serialVersionUID = -1L;        // This method is called when the button is pressed        public void actionPerformed(ActionEvent evt) {        	p.closeViewer();	            setVisible(false);            dispose();        }    };	JButton cancel = new JButton(canact);		// Create an action    Action okact = new AbstractAction("OK") {    	private static final long serialVersionUID = -1L;        // This method is called when the button is pressed        public void actionPerformed(ActionEvent evt) {            save();            setVisible(false);        	dispose();        }    }; 	JButton ok = new JButton(okact);		public PlayerViewer(final Player p) {		super("Player Viewer");		this.p = p;//		setUndecorated(true);		Dimension d = new Dimension(500,500);//		setSize(d);//		setMinimumSize(d);		setMaximumSize(d);		init(p);		final PlayerViewer pv = this;		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				save();				pv.dispose();			}		});		pack();	}		private void init(Player p) {		int y = 0;		Strategy strategy = p.getStrategy();		Container pane = getContentPane();		pane.setBackground(Color.white);        GridBagConstraints c = new GridBagConstraints(); 		c.insets = insets(3,3,0,0);        GridBagLayout gbl = new GridBagLayout(); 		pane.setLayout(gbl); 		c.gridx = 0; 		c.gridy = y;		human.setBackground(Color.white);		if (p.isHuman())			human.setSelected(true); 		pane.add(human,c);				c.gridy = ++y;		pane.add(new JLabel("Strategy"),c);		c.gridx = 1;		strategies.setBackground(Color.white);		pane.add(strategies,c);		strategies.setSelectedItem(p.getStrategyName());		c.gridx = 0;		c.gridy = ++y;		pane.add(new JLabel("Betting"),c);		c.gridx = 1;		betting.setBackground(Color.white);		pane.add(betting,c);		betting.setSelectedItem(p.getBettingName());		c.gridx = 0;		c.gridy = ++y;		pane.add(new JLabel("Count"),c);		c.gridx = 1;		pane.add(count,c);		count.setText(new Integer(p.getCount()).toString());		if (strategy.isBalanced()) {			c.gridx = 0;			c.gridy = ++y;			pane.add(new JLabel("Running count"),c);			c.gridx = 1;			rc.setText(new Integer(((BalancedStrategy)strategy).getRunningCount()).toString());			pane.add(rc,c);		}		else if (strategy instanceof UnbalancedStrategy) {				// Note non-counting strategies might have false isBalanced returns			c.gridx = 0;			c.gridy = ++y;			pane.add(new JLabel("Initial running count"),c);			c.gridx = 1;			rc.setText(new Integer(((UnbalancedStrategy)strategy).getInitialRunningCount()).toString());			pane.add(rc,c);			c.gridx = 0;			c.gridy = ++y;			pane.add(new JLabel("Key count"),c);			c.gridx = 1;			kc.setText(new Integer(((UnbalancedStrategy)strategy).getKeyCount()).toString());			pane.add(kc,c);		}		else if (!(strategy instanceof BasicStrategy))			throw new IllegalStateException("PlayerViewer no strategy interface for " + strategy);		c.gridx = 0;		c.gridy = ++y;		c.gridwidth = 2;		pane.add(new JLabel("Expected Values"),c);		c.gridx = 0;		c.gridy = ++y;		c.gridheight = 3;		c.gridwidth = 5;		EV ev = new EV();		String[] data = ev.getEV(BlackJackGame.deck,p.getHand(),p.dealersUp,false);		JTable tbl = new JTable(new EVTableModel(data));//		TableColumnModel tcm = tbl.getColumnModel();//		tcm.getColumn(0).setPreferredWidth(150);//		tcm.getColumn(0).setMinWidth(150);		tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);		tbl.setPreferredScrollableViewportSize(tbl.getPreferredSize());		JScrollPane sp = new JScrollPane(tbl);		pane.add(sp,c);		c.gridx = 0;		y += 3;		c.gridy = y;		c.gridheight = 1;		c.gridwidth = 2;		JPanel luck = new JPanel();		luck.setBackground(Color.white);		int tmp = c.anchor;		c.anchor = GridBagConstraints.WEST;		luck.add(new JLabel("Luck of the draw"));		String avgEV = p.getAvgEV();		ev_avg.setText(avgEV.substring(0,Math.min(avgEV.length()-1,6)));		luck.add(ev_avg);		pane.add(luck,c);		c.gridy = ++y;		c.gridx = 0;		JPanel total = new JPanel();		total.setBackground(Color.white);		total.add(new JLabel("Total Wagered"));		tot_wager.setText(new Integer(p.getTotalWagered()).toString());		total.add(tot_wager);		pane.add(total,c);		c.gridy = ++y;		JPanel stats = new JPanel();		stats.setBackground(Color.white);		c.gridwidth = 5;		c.gridwidth = GridBagConstraints.REMAINDER;		pane.add(stats,c);	    GridBagConstraints cs = new GridBagConstraints();	    GridBagLayout gbls = new GridBagLayout();	 	stats.setLayout(gbls);	 	stats.setBorder(BorderFactory.createTitledBorder("Statistics")); 		cs.insets = insets(3,3,0,0);		cs.gridwidth = 1;		cs.gridheight = 1;		cs.gridy = 0;		cs.gridx = 0;		cs.anchor = GridBagConstraints.EAST;		stats.add(new JLabel("Dealer blackjacks: "),cs);		cs.gridx = 1;		cs.anchor = GridBagConstraints.WEST;		stats.add(new JLabel(new Integer(BlackJackApp.getGame().getDealersBlackjacks()).toString()),cs);		cs.gridy = 1;		cs.gridwidth = 1;		cs.gridx = 0;		cs.anchor = GridBagConstraints.EAST;		stats.add(new JLabel("Player blackjacks: "),cs);		cs.gridx = 1;		cs.gridwidth = 3;		cs.anchor = GridBagConstraints.WEST;		stats.add(new JLabel(new Integer(p.getBlackjacks()).toString()),cs);		cs.gridy = 2;		cs.gridwidth = 1;		cs.gridx = 0;		cs.anchor = GridBagConstraints.EAST;		stats.add(new JLabel("Wins: "),cs);		cs.gridx = 1;		cs.gridwidth = 3;		cs.anchor = GridBagConstraints.WEST;		stats.add(new JLabel(new Integer(p.getWins()).toString()),cs);		cs.gridy = 3;		cs.gridwidth = 1;		cs.gridx = 0;		cs.anchor = GridBagConstraints.EAST;		stats.add(new JLabel("Losses: "),cs);		cs.gridx = 1;		cs.gridwidth = 3;		cs.anchor = GridBagConstraints.WEST;		stats.add(new JLabel(new Integer(p.getLosses()).toString()),cs);		cs.gridy = 4;		cs.gridwidth = 1;		cs.gridx = 0;		cs.anchor = GridBagConstraints.EAST;		stats.add(new JLabel("Pushes: "),cs);		cs.gridx = 1;		cs.gridwidth = 3;		cs.anchor = GridBagConstraints.WEST;		stats.add(new JLabel(new Integer(p.getPushes()).toString()),cs);		c.gridheight = 1;		c.anchor = tmp;		c.gridy += 7;;		c.gridx = 0;		c.gridwidth = 2;		JPanel buttons = new JPanel();		buttons.setBackground(Color.white);		cancel.setBackground(Color.white);		buttons.add(cancel);		ok.setBackground(Color.white);		buttons.add(ok);		getRootPane().setDefaultButton(ok);		pane.add(buttons,c);	}		private void save() {		if (human.isSelected() && !p.isHuman())			p.setHuman(true);		else if (!human.isSelected() && p.isHuman())			p.setHuman(false);		if (!strategies.getSelectedItem().equals(p.getStrategyName())) {			p.setStrategy((String)strategies.getSelectedItem(),BlackJackApp.getDecks());		}		p.closeViewer();	}		public Insets insets(int t, int l, int b, int r)	{		return new Insets(t,l,b,r);	}}// Data for table examplesclass EVTableModel extends AbstractTableModel {	protected String[] columnNames = 					{"Hand", "Standing", "Hitting", "Doubling", "Splitting" };	private String[] data;	// Constructor: calculate currency change to create the last column	public EVTableModel(String[] data) {		this.data = data;	}	// Implementation of TableModel interface 	public int getRowCount() {		return 1;	}	public int getColumnCount() {		return 5;	}	public Object getValueAt(int row, int column) {		return data[column];	}	public Class<String> getColumnClass(int column) {		return String.class;	}	public String getColumnName(int column) {		return columnNames[column];	}}