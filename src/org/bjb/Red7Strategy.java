package org.bjb;public class Red7Strategy extends Red7EasyStrategy implements UnbalancedStrategy {	private int rc;						// running count//	private int keyCount;				// key count	private int decks = 0;				// decks for count//	private int multiplier = 3;			// bet increase for better than key count//	private int betUnit = 10;		// Based on information at http://www.blackjackforumonline.com/content/How%20toCount.htm		public Red7Strategy(int decksNum) { super(decksNum); }		public String getName() { return "Red Seven"; }	public boolean isBalanced() { return false; }	public int getBet() {		return super.getBet();	}	public boolean insure(Deck d) {		if (decks == 1 || decks == 2) {			if (rc > 0) return true;		}		else if (rc > 4) return true;	// Based on BBIB Advanced chart		return false;	}	public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		boolean isSurrender = BlackJackApp.canSurrender();		// You only use advanced if more than 1/2 way through decks		if (d.topCard > (decksNum*52/2)) {			if (decksNum == 1 || decksNum == 2) {				switch (v) {					case 16:						if (dv == 9 && getCount() >= 2)							return "Stand";						else if (dv == 10 && getCount() >= -2)							return "Stand";						break;					case 15:						if (isSurrender) {							if (dv == 9 && getCount() >= 2)								return "Surrender";							if ((dv == 1 || dv == 10) && getCount() >= 0)								return "Surrender";							break;						}						if (dv == 10 && getCount() >= 2)							return "Stand";						break;					case 14:						if (isSurrender && dv == 10 && getCount() >= 2)							return "Surrender";						break;					case 12:						if (dv == 2 && getCount() >= 2)							return "Stand";						else if ((dv == 3 || dv == 4) && getCount() >= 0)							return "Stand";						else if ((dv == 5 || dv == 6) && getCount() >= -2)							return "Stand";						break;					case 11:						if (dv == 1 && getCount() >= -2)							return "Stand";						break;					case 10:						if ((dv == 1 || dv == 10) && getCount() >= 2)							return "Stand";						break;					case 9:						if (dv == 2 && getCount() >= 0)							return "Stand";						if (dv == 7 && getCount() >= 2)							return "Stand";						break;					default: 						break;				}				if (decksNum == 1) {					switch (v) {						case 16:							if (dv == 8 && getCount() >= 6)								return "Stand";							else if (dv == 1 && getCount() >= 4)								return "Stand";							break;						case 15:							if (dv == 8 && getCount() >= 6)								return "Stand";							else if ((dv == 9 || dv == 1) && getCount() >= 4)								return "Stand";							break;						case 14:							if ((dv == 2 || dv == 3) && getCount() >= -4)								return "Stand";							if (dv == 10 && getCount() >= 6)								return "Stand";							break;						case 13:							if ((dv == 2 || dv == 3 || dv == 4) && getCount() >= -2)								return "Stand";							break;						case 11:							if ((dv == 9 || dv == 10) && getCount() >= -4)								return "Stand";							break;						case 10:							if (dv == 8 && getCount() >= -4)								return "Stand";							else if (dv == 9 && getCount() >= -2)								return "Stand";							break;						default: 							break;					}				}			}			else {				switch (v) {					case 16:						if (dv == 9 && getCount() >= 4)							return "Stand";						else if (dv == 10 && getCount() >= -4)							return "Stand";						break;					case 15:						if (isSurrender) {							if ((dv == 9 || dv == 1) && getCount() >= 0)								return "Surrender";							else if (dv == 10 && getCount() >= -4)								return "Surrender";						}						if ((dv == 10 || dv == 1) && getCount() >= 4)							return "Stand";						break;					case 14:						if (isSurrender && dv == 10 && getCount() >= 4)							return "Surrender";						break;					case 12:						if (dv == 2 && getCount() >= 4)							return "Stand";						else if (dv == 3 && getCount() >= 0)							return "Stand";						else if (dv == 4 && getCount() >= -4)							return "Stand";						break;					case 11:						if (dv == 1 && getCount() >= -4)							return "Stand";						break;					case 10:						if ((dv == 10 || dv == 1) && getCount() >= 4)							return "Stand";						break;					case 9:						if (dv == 2 && getCount() >= -4) 							return "Stand";						else if (dv == 7 && getCount() >= 4)							return "Stand";						break;					default:						break;				}							}		}		return super.updateBasic(d,currentHand,dealersHand);	}			public void reset() { rc = 0; }/*	public void updateCount(Deck d,Card c) { 				if (decks == 0 || decks != (d.cards.length / 52)) {		// If not set or changed			decks = d.cards.length / 52;			switch (decks) {				case 1:					rc = 0;					keyCount = 2;					break;				case 2:					rc = -4;					keyCount = 1;					break;				case 6:					rc = -20;					keyCount = -4;					break;				case 8:					rc = -28;					keyCount = -6;					break;				default:					break;			}		}		int v = c.iValue;		if (v >= 2 && v <= 6) rc += 1;		if (v == 7 & (c.suit.equals("h") || c.suit.equals("d")))			rc += 1;		if (v == 10 | v == 1) rc -= 1;	}*/		public int getCount() { return rc; }		public int getInitialRunningCount() {		int irc = -99;		// If you see this we have a bug		switch (decks) {			case 1:				irc = 0;				break;			case 2:				irc = -4;				break;			case 4:				break;		// TODO need this handled			case 6:				irc = -20;				break;			case 8:				irc = -28;				break;			default:				irc = -28;				break;		}			return irc;	}		public int getKeyCount() {		int kc = -99;			// If you see this we have a bug		switch (decks) {			case 1:				kc = 2;				break;			case 2:				kc = 1;				break;			case 4:				break;		// TODO need this handled			case 6:				kc = -4;				break;			case 8:				kc = -6;				break;			default:				kc = -6;				break;		}			return kc;	}		// supported charts	protected boolean isDoubleChart() { return true; }}