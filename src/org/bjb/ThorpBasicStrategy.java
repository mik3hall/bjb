package org.bjb;public class ThorpBasicStrategy extends Strategy implements BalancedStrategy {	public String getName() { return "Thorp Basic Strategy"; }	public int getCount() { return 0; }	public int getRunningCount() { return 0; }	public boolean isBalanced() { return true; }	public int getBet() { return 10; }	public void updateCount(Deck d,Card c) {}	public ThorpBasicStrategy(int decksNum) { super(decksNum); }		public void reset() {}		final public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check pair		if (sv != 0) {			switch (v) {				case 1: 	// Always split					return "Split";				case 2:				case 3:					if (dv > 7) break;					return "Split";				case 4:					if (dv == 5) return "Split";					break;				case 5:					break;				case 6:					if (dv == 1 || dv > 7) break;					return "Split";				case 7:					if (dv == 1 || dv > 8) break;					return "Split";				case 8:					return "Split";				case 9:					if (dv == 1 || dv == 7 || dv == 10) break;					return "Split";				default:	// 10					break;	// never split			}		}		// Check double down		if (currentHand.canDoubleDown()) {			if (soft) {				switch (v) {					case 18:						if (dv > 2 && dv < 7) {							return "Double down";						}						break;					case 17:						if (dv > 1 && dv < 7) {							return "Double down";						}						break;					case 16:					case 15:					case 14:					case 13:						if (dv > 3 && dv < 7) {							return "Double down";						}						break;					case 12:						if (dv > 4 && dv < 7) {							return "Double down";						}						break;					default: 						break;				}			}			else {				if (v == 11) {					return "Double down";				}				else if (v == 10 && dv != 10 && dv != 1) {					return "Double down";				}				else if (v == 9 && dv != 1 && dv < 7) {					return "Double down";				}				else if (v == 8 && (dv == 5 || dv == 6) && !currentHand.sixTwo()) {					return "Double down";				}			}		}		// Check standing		if (soft) {			switch (v) {				case 18:					if (dv == 9 || dv == 10)						return "Hit";					else return "Stand";							default:					if (v < 18) return "Hit";							return "Stand";						// 19 or 20					}		}		else {			switch (dv) {				case 2:				case 3:					if (v > 12) {						return "Stand";					}				case 4:				case 5:				case 6:					if (v > 11) {						return "Stand";					}				default:					if (dv == 10) {						if (v == 16 && currentHand.getNumCards() > 2) {							return "Stand";						}						if (v == 14 && currentHand.canSplit()) {							return "Stand";						}					}					if (v > 16) {						return "Stand";					}					return "Hit";			}					}	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return false; }	protected boolean isDoubleChart() { return false; }	protected boolean isSoftChart() { return false; }}