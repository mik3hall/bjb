package org.bjb;public class Red7EasyStrategy extends Strategy implements UnbalancedStrategy {	private int rc;						// running count	protected int keyCount;				// key count//	private int multiplier = 3;			// bet increase for better than key count	private int betUnit = 10;		// Based on information at http://www.blackjackforumonline.com/content/How%20toCount.htm		public Red7EasyStrategy(int decksNum) { 		super(decksNum); 		rc = getInitialRunningCount();	}		public String getName() { return "Red Seven Easy"; }	public boolean isBalanced() { return false; }	public int getBet() {		if (decksNum == 1) {			if (rc < 0) return betUnit;			else if (rc < 2) return betUnit*2;			return betUnit*4;		}		else if (decksNum == 2) {			if (rc < 0) return betUnit;			else if (rc < 4) return betUnit*2;			else if (rc < 6) return betUnit*3;			else if (rc < 8) return betUnit*4;			return betUnit*6;		}		else {			if (rc < 0) return betUnit;			else if (rc < 6) return betUnit*2;			else if (rc < 8) return betUnit*3;			else if (rc < 12) return betUnit*4;			return betUnit*8;		}	}	public boolean insure(Deck d) {		if (decksNum == 1 || decksNum == 2) {			if (rc >= 0) return true;		}		else if (rc >= 2) return true;		return false;	}	public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		switch (v) {			case 16:				if (dv == 10 && getCount() >= 0)					return "Stand";				break;			case 15:				if (dv == 10 && getCount() >= 2)					return "Stand";				break;			case 12:				if (dv == 3 && getCount() > 0)					return "Stand";				else if (dv == 2 && getCount() >= 2)					return "Stand";				break;			case 10:				if (currentHand.canDoubleDown() && dv == 10 && getCount() >= 2) return "Double down";				break;			default:				break;		}		return super.updateBasic(d,currentHand,dealersHand);	}			public void reset() { rc = getInitialRunningCount(); }		public void updateCount(Deck d,Card c) { 			decksNum = d.getDecksNum();		switch (decksNum) {			case 1:				rc = 0;				keyCount = 2;				break;			case 2:				rc = -4;				keyCount = 1;				break;			case 6:				rc = -20;				keyCount = -4;				break;			case 8:				rc = -28;				keyCount = -6;				break;			default:				break;		}		int v = c.iValue;		if (v >= 2 && v <= 6) rc += 1;		if (v == 7 & (c.suit.equals("h") || c.suit.equals("d")))			rc += 1;		if (v == 10 | v == 1) rc -= 1;	}	public int getCount() { return rc; }		public int getInitialRunningCount() {		int irc = -99;		// If you see this we have a bug		switch (decksNum) {			case 1:				irc = -2;				break;			case 2:				irc = -4;				break;			case 3:				irc = -6;			case 4:				irc = -8;				break;					case 5:				irc = -10;				break;			case 6:				irc = -12;				break;			case 7:				irc = -14;			case 8:				irc = -16;				break;			default:				irc = -28;				break;		}			return irc;	}		public int getKeyCount() {		int kc = -99;			// If you see this we have a bug		switch (decksNum) {			case 1:				kc = 2;				break;			case 2:				kc = 1;				break;			case 4:				break;		// TODO need this handled			case 6:				kc = -4;				break;			case 8:				kc = -6;				break;			default:				kc = -6;				break;		}			return kc;	}		// supported charts	protected boolean isDoubleChart() { return true; }}