package org.bjb;import java.awt.*;import java.awt.event.*;import javax.swing.*;public class Tip {	private static final String prefix = "<html>"+			"<head>"+			"<style type=\"text/css\">"+			"b { font: 16pt \"Lucida Grande\" }"+			"p { font: 14pt \"Lucida Grande\"; margin-top: 8px }"+			"</style>"+			"</head>"; 	private static final String tip1 = new StringBuffer(prefix).append("<p>When playing basic strategy <font color=red><b>never</b></font> take insurance</p></html>").toString();	private static final String tip2 = new StringBuffer(prefix).append("<p>When playing basic strategy <font color=green><b>always</b></font> split aces and eights<br><font color=red><b>never</b></font> split pairs of fours or fives</p></html>").toString();	private static final String tip3 = new StringBuffer(prefix).append("<p>A 5 or 6 is called a <b>\"dealer's bust card\"</b> although there's better than a 50% chance he won't</p></html>").toString();	private static final String tip4 = new StringBuffer(prefix).append("<p>The casino rule variation most detrimental to the player is a 6-5 instead of 3-2 blackjack payoff. <font color=red><b>DON'T play it!</b></font></p></html>").toString();	private static final String tip5 = new StringBuffer(prefix).append("<p><font color=red size=\"+1\">Don't</font> take a hit if the dealer is more likely to bust than you are</p><p>Dealer's Bust-Out Rate<br><table border=\"2\"><th>Dealer's Upcard</th><th>Bust-Out Rate</th><tr><td>2</td><td>35.30%</td></tr><tr><td>3</td><td>37.56%</td></tr><tr><td>4</td><td>40.28%</td></tr><tr><td>5</td><td>42.89%</tr><tr><td>6</td><td>42.08%</td></tr><tr><td>7</td><td>25.99%</td></tr><tr><td>8</td><td>23.86%</td></tr><tr><td>9</td><td>23.34&</td></tr><tr><td>10</td><td>21.43%</td></tr><tr><td>Ace</td><td>11.65%</td></tr></table></p></html>").toString();	private static final String tip6 = new StringBuffer(prefix).append("<p>Full-<font color=green><b>Kelly</b></font> criteria betting is considered to be a bankroll roller coaster, way <font color=red><b>TOO VOLATILE</b></font>. Despite this theoretically avoiding <font color=red><b>\"Gambler's ruin\"</b></font> (Google it, check out the wikipedia)</p></html>").toString();	private static final String tip7 = new StringBuffer(prefix).append("<p>The first player to the dealer's left is considered <font color=green><b>First Base</b></font>. The last player to the dealer's immediate right is considered the <font color=green><b>Third Base</b></font> player.</p></html>").toString();	private static final String tip8 = new StringBuffer(prefix).append("<p><b><font color=green>IRC (Initial Running Count)</font></b> - Changed beginning count value to simplify a card counting system.</p><p><b><font color=green>key count</font></b> at or above you have the advantage</p><p><b><font color=green>pivot point</font></b> at which there is reliable information about expectation</p><p>Key count and pivot count depend on the IRC</p></html>").toString();	private static final String tip9 = new StringBuffer(prefix).append("<p>The dealear <b>\"shows weakness\"</b> with a 2-6 upcard, he <b>\"shows strength\"</b> showing a 9 or up.</p></html>").toString();	private static final String tip10 = new StringBuffer(prefix).append("<p>A good rule of thumb is to assume the dealer has a 10 in the hole.</p></html>").toString();	private static final String tip11 = new StringBuffer(prefix).append("<p>Deck penetration is how far into the shoe cards are dealt before a shuffle.</p></html>").toString();	private static final String tip12 = new StringBuffer(prefix).append("<p>Blackjacks are also called \"naturals\".</p></html>").toString();	private static final String tip13 = new StringBuffer(prefix).append("<p>A \"soft\" hand has an ace that can be counted as a 11. A \"hard\" hand has no ace or one that must be counted as 1. A \"stiff\" hand, is one with a hard total of 12-16 that can be busted with a single hit.</p></html>").toString();	private static final String tip14 = new StringBuffer(prefix).append("<p>Without counting deviating from basic strategy in the long run will lose you more money.</p></html>").toString();	private static final String tip15 = new StringBuffer(prefix).append("<p>More high cards available make it more likely the dealer will bust. More low cards less likely. This is how card counting works.</p></html>").toString();	private static final String tip16 = new StringBuffer(prefix).append("<p>The \"<b>key count</b>\" is when the player has the advantage.</p></html>").toString();	private static final String tip17 = new StringBuffer(prefix).append("<p>Card count systems can...<br/>be <b>Multi-level</b> where the count isn't simple +1/-1.<br/><br/>have <b>side counts</b>, usually on aces, these are called <b>Multi-parameter</b>.<br/><br/>involve <b>Strategy-variation indices</b> or charts to be memorized.</b></html>").toString();	private static final String tip18 = new StringBuffer(prefix).append("<p>Card counting systems can be <b>balanced</b> or <b>unbalanced</b> depending on whether there are as many plus's as there are minus's.<br/>Balanced systems require you to determine a <b>true count</b>.</p></html>").toString();	private static final String tip19 = new StringBuffer(prefix).append("<p>Watching a table and sitting down to play when there is a favorable count is called \"<b>back-counting</b>\" or sometimes \"<b>wonging</b>\".</p></html>").toString();	static final String[] tips = new String[] { tip1,tip2,tip3,tip4,tip5, tip6,tip7,tip8,tip9,tip10,tip11,tip12,tip13,tip14,tip15,tip16,tip17,tip18,tip19 };	public static TipViewer getViewer() {		return new TipViewer();	}}class TipViewer extends JFrame {	private static int cnt = -1;	private static JEditorPane tip = new JEditorPane("text/html","");	private static JScrollPane scroller = new JScrollPane(tip);	JLabel ico = new JLabel(UIManager.getIcon("OptionPane.informationIcon"));	 	// Create an action    Action nextact = new AbstractAction("Next") {    	private static final long serialVersionUID = -1L;        // This method is called when the button is pressed        public void actionPerformed(ActionEvent evt) {        	tip.setText(getNextTip());			tip.setCaretPosition(0);        }    };	JButton next = new JButton(nextact);		// Create an action    Action okact = new AbstractAction("OK") {    	private static final long serialVersionUID = -1L;        // This method is called when the button is pressed        public void actionPerformed(ActionEvent evt) {            setVisible(false);        	dispose();        }    }; 	JButton ok = new JButton(okact); 		public TipViewer() {		super("Tip");		Dimension d = new Dimension(450,300);		scroller.setSize(450,300);		scroller.setPreferredSize(d);		setBackground(Color.white);		getContentPane().setBackground(Color.white); 		getContentPane().setLayout(new GridBagLayout());		GridBagConstraints c = new GridBagConstraints();		c.fill = GridBagConstraints.HORIZONTAL;		c.anchor = GridBagConstraints.CENTER;		getContentPane().add(ico,c);		c.gridy = 1;		c.fill = GridBagConstraints.REMAINDER;		c.anchor = GridBagConstraints.CENTER;		c.gridwidth = 10;		c.gridheight = 10;		tip.setEditable(false);		tip.setText(getNextTip());		tip.setCaretPosition(0);		getContentPane().add(scroller,c);		JPanel buttons = new JPanel();		buttons.add(next);		buttons.add(ok); 		c.anchor = GridBagConstraints.WEST;		c.gridy = 11;		c.gridwidth = 2;		c.gridheight = 1;		getContentPane().add(buttons,c);		getRootPane().setDefaultButton(ok);		pack();	}		private String getNextTip() {		if (cnt == Tip.tips.length-1) cnt = -1;		return Tip.tips[++cnt];	}}