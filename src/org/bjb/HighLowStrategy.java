package org.bjb;public class HighLowStrategy extends HighLowGenericStrategy implements BalancedStrategy {	/**	 * High-Low strategy implementation based on the book	 * Professional Blackjack - Sanford Wong	 * 1994 edition 	 */		/**	 * 	 * @param decksNum	 */	public HighLowStrategy(int decksNum) { super(decksNum); }		public String getName() { return "Hi-Lo"; }		public boolean insure(Deck d) {		int decksNUM = d.decksNUM;		if (decksNUM == 1 && tc(d) >= 1.4d) return true;		else if (decksNUM == 2 && tc(d) >= 2.4d) return true;		else if (decksNUM == 3 && tc(d) >= 2.7d) return true;		else if (decksNUM >= 4 && tc(d) > 3.0d) return true;		return false;	}		public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		if (getRules().isH17())			return updateH17(d,currentHand,dealersHand);		return updateS17(d,currentHand,dealersHand);	}		private double tc(Deck d) {		return Math.floor((double)rc / ((double)d.decksNUM*52.0d-(double)d.topCard) / 52.0d);	}		private String updateH17(Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (BlackJackApp.canSurrender()) {		}		// Check insurance		if (dv == 1) {			}		String split = null;				// Check pair splits		if (sv != 0)			split = h17_split(sv,dv);		if (split != null) return split;				// Check soft hands		boolean isDouble = getRules().canDouble(v) && currentHand.canDoubleDown();		if (soft) return h17_soft(v,dv,isDouble);		else if (v > 11) return h17_stiff(v,dv);		else return h17_hard(v,dv,isDouble);	}		/**	 * Handle splits 	 * H17, no DAS, based on Table 10	 * 	 * @return String strategy: Split, Hit or null to continue determining strategy	 */	private String h17_split(int sv,int dv) {		if (getRules().isDAS()) {	// double allowed after split			return h17_das_split(sv,dv);		}		switch (sv) {			case 10:	// 10				if (dv < 3 || dv > 6) return "Stand";				else if (dv == 3) {					if (getCount() >= 8) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= 5) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= 4) return "Split";					return null;				}				return null;			case 1: 				if (dv == 10) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 7) {					if (getCount() >= -9) return "Split";					return "Hit";				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 9) {					if (getCount() >= -7) return "Split";					return "Hit";				}				else if (dv == 1) {					if (getCount() >= -4) return "Split";					return "Hit";				}				return "Split";			case 2:				if (dv == 1 || dv > 6) return "Hit";				if (dv == 2) {					if (getCount() >= 7) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -7) return "Split";					return null;				}				else if (dv == 7) return "Split";				return null;			case 3:				if (dv == 1 || dv > 7) return "Hit";				if (dv == 2) {					if (getCount() >= 8) return "Split";					return null;				}				else if (dv == 3) { 					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 7) return "Split";				return null;			case 4:			case 5:				return null;			case 6:				if (dv == 1 || dv > 6) return "Hit";				if (dv == 2) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -7) return "Split";					return null;				}				return null;			case 7:				if (dv == 1 || dv > 7) return "Hit"; 				if (dv == 2) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -10) return "Split";					return null;				}				else if (dv > 3 && dv < 8) return "Split";			case 8:				if (dv == 10) {					if (getCount() < 6) return "Split";					return null;				}				if (dv == 1) {					if (getCount() >= -1) return "Split";					return null;				}				return "Split";			case 9:				if (dv == 10) return "Stand"; 				if (dv == 1) {					if (getCount() >= 2) return "Split";					return null;				}				else if (dv == 2) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -6) return "Split";					return null;				}				else if (dv == 7) { 					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 9) {					if (getCount() >= -9) return "Split";					return null;				}				return null;			default:				return null;		}	}	private String h17_das_split(int sv,int dv) {		switch (sv) {			case 10:	// 10				if (dv < 3 || dv > 6) return "Stand";				else if (dv == 3) {					if (getCount() >= 8) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= 5) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= 4) return "Split";					return null;				}				return null;			case 1: 				if (dv == 10) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 7) {					if (getCount() >= -9) return "Split";					return "Hit";				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 9) {					if (getCount() >= -7) return "Split";					return "Hit";				}				else if (dv == 1) {					if (getCount() >= -4) return "Split";					return "Hit";				}				return "Split";			case 2:				if (dv == 1 || dv > 8) return "Hit";				else if (dv == 2) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -7) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= 5) return "Split";					return null;				}				return "Split";			case 3:				if (dv == 1 || dv > 8) return "Hit";				else if (dv == 2) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -7) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= 4) return "Split";					return null;				}				return "Split";			case 4:				if (dv == 1 || dv > 6) return "Hit";				else if (dv == 2) return "Hit";				else if (dv == 3) {					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -6) return "Split";					return null;				}				return null;			// Shouldn't get here			case 5:				return null;			case 6:				if (dv == 1 || dv > 6) return "Hit";				if (dv == 2) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -6) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -10) return "Split";					return null;				}				return null;		// Shouldn't get here			case 7:				if (dv == 1 || dv > 8) return "Hit"; 				else if (dv == 2) {					if (getCount() >= -10) return "Split";					return null;				}				else if (dv > 2 && dv < 8) return "Split";				else if (dv == 8) {					if (getCount() >= 5) return "Split";					return null;				}				return null;		// Shouldn't get here			case 8:				if (dv == 10) {					if (getCount() < 8) return "Split";					return null;				}				if (dv == 1) {					if (getCount() >= -1) return "Split";				}				return "Split";			case 9:				if (dv == 10) return "Stand"; 				else if (dv == 1) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 2) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -4) return "Split";					return null;									}				else if (dv == 4) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -6) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 7) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 9) {					if (getCount() >= -9) return "Split";					return null;				}				return "Split";			default:					return null;		}	}		private String h17_soft(int v,int dv,boolean isDouble) {		switch (v) {			case 21: return "Stand";			case 20: 				if (dv == 1 || dv > 6) return "Stand";				else if (dv == 2) {					if (isDouble && getCount() >= 10) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (isDouble && getCount() >= 8) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (isDouble && getCount() >= 6) return "Double down";					return "Stand";				}				else if (dv == 5) {					if (isDouble && getCount() >= 5) return "Double down";					return "Stand";				}				else if (dv == 6) {					if (isDouble && getCount() >= 4) return "Double down";					return "Stand";				}				break;			case 19:				if (dv == 1 || dv > 6) return "Stand";				else if (dv == 2) {					if (isDouble && getCount() >= 8) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (isDouble && getCount() >= 5) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (isDouble && getCount() >= 3) return "Double down";					return "Stand";				}				else if (dv == 5) {					if (isDouble && getCount() >= 1) return "Double down";					return "Stand";				}				else if (dv == 6) {					if (isDouble && getCount() >= 0) return "Double down";					return "Stand";				}				break;			case 18:				if (dv == 1 || dv > 8) return "Hit";				else if (dv == 2) {					if (isDouble && getCount() >= 0) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (isDouble && getCount() >= -2) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (isDouble && getCount() >= -6) return "Double down";					return "Stand";				}				else if (dv == 5) {					if (isDouble && getCount() >= -8) return "Double down";					return "Stand";				}				else if (dv == 6) {					if (isDouble) return "Double down";					return "Stand";				}				else if (dv == 7 || dv == 8) return "Stand"; 				break;			case 17:				if (dv == 1 || dv > 6) return "Hit";				else if (dv == 2) {					if (isDouble && getCount() >= 1) return "Double down";					return "Hit";				}				else if (dv == 3) {					if (isDouble && getCount() >= -3) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= -7) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -10) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble) return "Double down";					return "Stand";				}				break;			case 16:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 3) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= -3) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -6) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble) return "Double down";					return "Hit";				}				break;			case 15:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 6) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= 0) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -4) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble && getCount() >= -10) return "Double down";					return "Hit";				}				break;			case 14:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 6) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= 1) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -1) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble && getCount() >= -5) return "Double down";					return "Hit";				}				break;			case 13:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 7) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= 3) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= 0) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble && getCount() >= -2) return "Double down";					return "Hit";				}				break;			default:				break;		}		throw new IllegalArgumentException("HighLowStrategy H17 Soft " + v + " shouldn't of happened dv " + dv);	}	private String  h17_stiff(int v,int dv) {		if (v > 17) return "Stand";		else if (v == 17) {			if (dv == 1) {				if (getCount() >= -4) return "Stand";				return "Hit";			}			return "Stand";		}		else if (v == 16) {			if (dv == 10) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			else if (dv == 2) {				if (getCount() >= -9) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -10) return "Stand";				return "Hit";			}			else if (dv > 3 && dv < 7) return "Stand";			else if (dv == 7) {				if (getCount() >= 9) return "Stand";				return "Hit";			}			else if (dv == 8) {				if (getCount() >= 7) return "Stand";				return "Hit";			}			else if (dv == 9) {				if (getCount() >= 5) return "Stand";				return "Hit";			}			else if (dv == 1) {				if (getCount() >= 3) return "Stand";			}			return "Stand";		}		else if (v == 15) {			if (dv == 2) {				if (getCount() >= -5) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -7) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -8) return "Stand";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= -9) return "Stand";				return "Hit";			}			else if (dv == 7 || dv == 8) {				if (getCount() >= 10) return "Stand";				return "Hit";			}			else if (dv == 9) {				if (getCount() >= 8) return "Stand";				return "Hit";			}			else if (dv == 10) {				if (getCount() >= 4) return "Stand";				return "Hit";			}			else if (dv == 1) {				if (getCount() >= 5) return "Stand";				return "Hit";			}			return "Stand"; 		}		else if (v == 14) {			if (dv == 1 || dv > 6) return "Hit";			else if (dv == 2) {				if (getCount() >= -3) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -5) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -6) return "Stand";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= -7) return "Stand";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= -9) return "Stand";				return "Hit";			}			return "Stand";		}		else if (v == 13) {			if (dv > 6 || dv == 1) return "Hit";			else if (dv == 2) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -2) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -3) return "Stand";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= -4) return "Stand";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= -7) return "Stand";				return "Hit";			}			return "Stand";						}		else if (v == 12) {			if (dv == 1 || dv > 6) return "Hit";			else if (dv == 2) {				if (getCount() >= 3) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= 1) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= -1) return "Stand";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= -3) return "Stand";  			}			return "Stand";		}		return "Hit";	}		private String h17_hard(int v,int dv,boolean isDouble) {		if (v == 11) {			if (dv == 9 || dv == 10) {				if (isDouble && getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv > 1 && dv < 7) {				if (isDouble) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (isDouble && getCount() >= -9) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (isDouble && getCount() >= -6) return "Double down";				return "Hit";			}			else if (dv == 1) {				if (isDouble && getCount() >= 0) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			else return "Hit";		}		else if (v == 10) {			if (dv == 10 || dv == 1) {				if (isDouble && getCount() >= 4) return "Double down";				return "Hit";			}			else if (dv == 2) {				if (isDouble && getCount() >= -8) return "Double down";				return "Hit";			}			else if (dv == 3) {				if (isDouble && getCount() >= -9) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (isDouble && getCount() >= -10) return "Double down";				return "Hit";			}			else if (dv == 5 || dv ==  6) {				if (isDouble) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (isDouble && getCount() >= -6) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (isDouble && getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv == 9) {				if (isDouble && getCount() >= -1) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		else if (v == 9) {			if (dv == 1 || dv > 8) return "Hit";			else if (dv == 2) {				if (isDouble && getCount() >= 1) return "Double down";				return "Hit";			}			else if (dv == 3) {				if (isDouble && getCount() >= 0) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (isDouble && getCount() >= -2) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (isDouble && getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (isDouble && getCount() >= -6) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (isDouble && getCount() >= 3) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (isDouble && getCount() >= 7) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		else if (v == 8) {			if (dv < 3 || dv > 6) return "Hit";			else if (dv == 3) {				if (isDouble && getCount() >= 9) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (isDouble && getCount() >= 5) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (isDouble && getCount() >= 3) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (isDouble && getCount() >= 1) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		else if (v == 7) {			if (dv < 5 || dv > 6) return "Hit";			else if (dv == 5 || dv == 6) {				if (isDouble && getCount() >= 9) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		// 6-5		return "Hit";	}		/**	 * Update strategy for S17 Dealer stands on soft 17 situations	 * 	 * @param d	 * @param currentHand	 * @param dealersHand	 * @return	 */	// Dealer stands on soft 17	private String updateS17(Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		// Check surrender		if (BlackJackApp.canSurrender()) {		}		// Check insurance		if (dv == 1) {			int decksNUM = d.decksNUM;			if (decksNUM == 1 && tc(d) >= 1.4d) return "Insurance";			else if (decksNUM == 2 && tc(d) >= 2.4d) return "Insurance";			else if (decksNUM == 3 && tc(d) >= 2.7d) return "Insurance";			else if (decksNUM >= 4 && tc(d) > 3.0d) return "Insurance";		}		String s = null;				// Check pair splits		if (sv != 0) 			s = s17_split(sv,dv);		if (s != null) return s;			// Check soft hands		boolean isDouble = getRules().canDouble(v) && currentHand.canDoubleDown();		if (soft) return s17_soft(v,dv,isDouble);		else if (v > 11) return s17_stiff(v,dv);		else return s17_hard(v,dv,isDouble);	}		/**	 * Handle splits 	 * S17, no DAS, based on Table 9	 * 	 * @return String strategy: Split, Hit or null to continue determining strategy	 */	private String s17_split(int sv,int dv) {				if (getRules().isDAS()) {	// double allowed after split			return s17_das_split(sv,dv);		}		switch (sv) {			case 10:	// 10				if (dv < 3 || dv > 6) return "Stand";				else if (dv == 3) {					if (getCount() >= 8) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= 5) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= 4) return "Split";					return null;				}				return null;			case 1: 					if (dv == 10) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 7) {					if (getCount() >= -9) return "Split";					return "Hit";				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 9) {					if (getCount() >= -7) return "Split";					return "Hit";				}				else if (dv == 1) {					if (getCount() >= -3) return "Split";					return "Hit";				}				return "Split";			case 2:				if (dv == 1 || dv > 7) return "Hit";				if (dv == 2) {					if (getCount() >= 7) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 7) return "Split";				return null;			case 3:				if (dv == 1 || dv > 7) return "Hit";				if (dv == 2) {					if (getCount() >= 8) return "Split";					return null;				}				else if (dv == 3) { 					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 7) return "Split";				return null;			case 4:			case 5:				return null;			case 6:				if (dv == 1 || dv > 6) return "Hit";				if (dv == 2) {					if (getCount() >= 2) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -7) return "Split";					return null;				}				return null;			case 7:				if (dv == 1 || dv > 7) return "Hit"; 				if (dv == 2) {					if (getCount() >= -9) return "Split";					return null;				}				return "Split";			case 8:				if (dv == 10) {					if (getCount() < 6) return "Split";					return null;				}				return "Split";			case 9:				if (dv == 10) return "Stand"; 				if (dv == 1) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 2) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 7) { 					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 9) {					if (getCount() >= -9) return "Split";					return null;				}				return null;			default:	// Shouldn't get here				return null;		}	}		private String s17_das_split(int sv,int dv) {		switch (sv) {			case 10:	// 10				if (dv < 3 || dv > 6) return "Stand";				else if (dv == 3) {					if (getCount() >= 8) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= 5) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= 4) return "Split";					return null;				}				return null;			case 1: 					if (dv == 10) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 7) {					if (getCount() >= -9) return "Split";					return "Hit";				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return "Hit";				}				else if (dv == 9) {					if (getCount() >= -7) return "Split";					return "Hit";				}				else if (dv == 1) {					if (getCount() >= -3) return "Split";					return "Hit";				}				return "Split";			case 2:				if (dv == 1 || dv > 8) return "Hit";				if (dv == 2) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 4) { 					if (getCount() >= -7) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 6 || dv == 7) return "Split";				else if (dv == 8) {					if (getCount() >= 5) return "Split";					return null;				}			case 3:				if (dv == 1 || dv > 8) return "Hit";				if (dv == 2) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 3) { 					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -7) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 6 || dv == 7) return "Split";				else if (dv == 8) {					if (getCount() >= 4) return "Split";					return null;				}			case 4:				if (dv > 6 || dv == 2) return "Hit";				else if (dv == 3) {					if (getCount() >= 6) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -4) return "Split";					return null;				}			case 5:				return null;			case 6:				if (dv == 1 || dv > 6) return "Hit";				if (dv == 2) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -4) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -6) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -10) return "Split";					return null;				}				return null;			case 7:				if (dv == 1 || dv > 8) return "Hit"; 				if (dv == 2) {					if (getCount() >= -9) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= 5) return "Split";					return null;				}				return "Split";			case 8:				if (dv == 10) {					if (getCount() < 8) return "Split";					return null;				}				return "Split";			case 9:				if (dv == 10) return "Stand"; 				if (dv == 1) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 2) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -3) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -5) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -6) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= -6) return "Split";					return null;				}				else if (dv == 7) { 					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= -8) return "Split";					return null;				}				else if (dv == 9) {					if (getCount() >= -9) return "Split";					return null;				}				return null;			default:	// Shouldn't get here				return null;		}	}		private String s17_soft(int v,int dv,boolean isDouble) {		switch (v) {			case 21: return "Stand";			case 20: 				if (dv == 1 || dv > 6) return "Stand";				else if (dv == 2) {					if (isDouble && getCount() >= 10) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (isDouble && getCount() >= 8) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (isDouble && getCount() >= 6) return "Double down";					return "Stand";				}				else if (dv == 5) {					if (isDouble && getCount() >= 5) return "Double down";					return "Stand";				}				else if (dv == 6) {					if (isDouble && getCount() >= 4) return "Double down";					return "Stand";				}				break;			case 19:				if (dv == 1 || dv > 6) return "Stand";				else if (dv == 2) {					if (isDouble && getCount() >= 8) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (isDouble && getCount() >= 5) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (isDouble && getCount() >= 3) return "Double down";					return "Stand";				}				else if (dv == 5) {					if (isDouble && getCount() >= 1) return "Double down";					return "Stand";				}				else if (dv == 6) {					if (isDouble && getCount() >= 0) return "Double down";					return "Stand";				}				break;			case 18:				if (dv > 8) return "Hit";				else if (dv == 1) {					if (getCount() >= 1) return "Hit";					return "Stand";				}				else if (dv == 2) {					if (isDouble && getCount() >= 0) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (isDouble && getCount() >= -2) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (isDouble && getCount() >= -6) return "Double down";					return "Stand";				}				else if (dv == 5) {					if (getCount() < -8) return "Stand";					return "Double down";				}				else if (dv == 6) {					if (isDouble && getCount() >= -10) return "Double down";					return "Stand";				}				else if (dv == 7 || dv == 8) return "Stand"; 				break;			case 17:				if (dv == 1 || dv > 6) return "Hit";				else if (dv == 2) {					if (isDouble && getCount() >= 1) return "Double down";					return "Hit";				}				else if (dv == 3) {					if (isDouble && getCount() >= -3) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= -7) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -10) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble) return "Double down";					return "Hit";				}				break;			case 16:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 4) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= -2) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -6) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble) return "Double down";					return "Hit";				}				break;			case 15:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 7) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= 0) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -4) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble && getCount() >= -9) return "Double down";					return "Hit";				}				return null;			case 14:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 7) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= 1) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= -1) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble && getCount() >= -4) return "Double down";					return "Hit";				}				return null;			case 13:				if (dv > 6 || dv < 3) return "Hit";				else if (dv == 3) {					if (isDouble && getCount() >= 7) return "Double down";					return "Hit";				}				else if (dv == 4) {					if (isDouble && getCount() >= 3) return "Double down";					return "Hit";				}				else if (dv == 5) {					if (isDouble && getCount() >= 0) return "Double down";					return "Hit";				}				else if (dv == 6) {					if (isDouble && getCount() >= -1) return "Double down";					return "Hit";				}				return null;			default:				break;		}		throw new IllegalArgumentException("HighLowStrategy S17 Soft " + v + " shouldn't of happened dv " + dv);	}		private String s17_stiff(int v,int dv) {		if (v > 17) return "Stand";		else if (v == 17) {			if (dv == 1) {				if (getCount() >= -6) return "Stand";				return "Hit";			}			return "Stand";		}		else if (v == 16) {			if (dv == 10) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			else if (dv == 2) {				if (getCount() >= -8) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -10) return "Stand";				return "Hit";			}			else if (dv > 3 && dv < 7) return "Stand";			else if (dv == 7) {				if (getCount() >= 9) return "Stand";				return "Hit";			}			else if (dv == 8) {				if (getCount() >= 7) return "Stand";				return "Hit";			}			else if (dv == 9) {				if (getCount() >= 5) return "Stand";				return "Hit";			}			else if (dv == 1) {				if (getCount() >= 8) return "Stand";				return "Hit";			}			return "Stand";		}		else if (v == 15) {			if (dv == 10) {				if (getCount() >= 4) return "Stand";				return "Hit";			}			else if (dv == 2) {				if (getCount() >= -5) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -6) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -7) return "Stand";				return "Hit";			}			else if (dv == 5 || dv == 6) {				if (getCount() >= -9) return "Stand";				return "Hit";			}			else if (dv == 7 || dv == 8) {				if (getCount() >= 10) return "Stand";				return "Hit";			}			else if (dv == 9) {				if (getCount() >= 8) return "Stand";				return "Hit";			}			else if (dv == 1) {				if (getCount() >= 10) return "Stand";				return "Hit";			}			return "Stand"; 		}		else if (v == 14) {			if (dv == 1 || dv > 6) return "Hit";			else if (dv == 2) {				if (getCount() >= -3) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -4) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -6) return "Stand";				return "Hit";			}			else if (dv == 5 || dv == 6) {				if (getCount() >= -7) return "Stand";				return "Hit";			}			return "Stand";		}		else if (v == 13) {			if (dv == 1 || dv > 6) return "Hit";			else if (dv == 2) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= -1) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -3) return "Stand";				return "Hit";			}			else if (dv == 5 || dv == 6) {				if (getCount() >= -4) return "Stand";				return "Hit";			}			return "Stand";						}		else if (v == 12) {			if (dv == 1 || dv > 6) return "Hit";			else if (dv == 2) {				if (getCount() >= 3) return "Stand";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= 2) return "Stand";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= -1) return "Stand";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= 0) return "Stand";				return "Hit";			}			return "Stand";		}		return "Hit";			}		private String s17_hard(int v,int dv,boolean isDouble) {		if (v == 11) {			if (dv == 9 || dv == 10) {				if (isDouble && getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv > 1 && dv < 7) {				if (isDouble) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (isDouble && getCount() >= -9) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (isDouble && getCount() >= -6) return "Double down";				return "Hit";			}			else if (dv == 1) {				if (isDouble && getCount() >= 1) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		else if (v == 10) {			if (dv == 1 || dv == 10) {				if (isDouble && getCount() >= 4) return "Double down";				return "Hit";			}			else if (dv == 2) {				if (isDouble && getCount() >= -8) return "Double down";				return "Hit";			}			else if (dv == 3) {				if (isDouble && getCount() >= -9) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (isDouble && getCount() >= -10) return "Double down";				return "Hit";			}			else if (dv == 5 || dv ==  6) {				if (isDouble) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (isDouble && getCount() >= -6) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (isDouble && getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv == 9) {				if (isDouble && getCount() >= -1) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";   			return "Hit";		}		else if (v == 9) {			if (dv == 1 || dv > 8) return "Hit";			else if (dv == 2) {				if (isDouble && getCount() >= 1) return "Double down";				return "Hit";			}			else if (dv == 3) {				if (isDouble && getCount() >= 0) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (isDouble && getCount() >= -2) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (isDouble && getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (isDouble && getCount() >= -6) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (isDouble && getCount() >= 3) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (isDouble && getCount() >= 7) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		else if (v == 8) {			if (dv < 3 || dv > 6) return "Hit";			else if (dv == 3) {				if (isDouble && getCount() >= 9) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (isDouble && getCount() >= 5) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (isDouble && getCount() >= 3) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (isDouble && getCount() >= 1) return "Double down";				return "Hit";			}			if (isDouble) return "Double down";			return "Hit";		}		else if (v == 7) {			if (dv > 1 && dv < 5) return "Hit";			else if (dv == 5 || dv == 6) {				if (isDouble && getCount() >= 9) return "Double down";				return "Hit";			}			else if (dv == 1 || dv > 6) return "Hit";			if (isDouble) return "Double down";			return "Hit";		}		// 6-5		return "Hit";	}		// supported charts	protected boolean isSurrenderChart() { return false; }	protected boolean isSplitChart() { return true; }	protected boolean isDoubleChart() { return true; }	protected boolean isSoftChart() { return true; }}