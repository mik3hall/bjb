package org.bjb;public class ZenStrategy extends Strategy implements BalancedStrategy {	private int rc;						// running count	private int decks = 0;				// decks for count	private int multiplier = 3;			// bet increase for better than key count	private int betUnit = 10;		// Based on the book BLACKBELT IN BLACKJACK - Arnold Snyder		public ZenStrategy(int decksNum) { super(decksNum); }		public String getName() { return "Zen"; }	public boolean isBalanced() { return true; }	public int getBet() {		if (decks == 1) {			if (rc < 0) return betUnit;			else if (rc < 2) return betUnit*2;			return betUnit*4;		}		else if (decks == 2) {			if (rc < 0) return betUnit;			else if (rc < 4) return betUnit*2;			else if (rc < 6) return betUnit*3;			else if (rc < 8) return betUnit*4;			return betUnit*6;		}		else {			if (rc < 0) return betUnit;			else if (rc < 6) return betUnit*2;			else if (rc < 8) return betUnit*3;			else if (rc < 12) return betUnit*4;			else if (rc < 16) return betUnit*6;			return betUnit*8;		}	}	public boolean insure(Deck d) {		if (decks == 1 || decks == 2) {			if (rc > 0) return true;		}		else if (rc > 2) return true;		return false;	}	public void reset() { rc = 0; }		public String updateBasic(Deck d,Hand currentHand,Hand dealersHand) {		boolean soft = currentHand.isSoft();		int v = currentHand.bestScore();		int dv = dealersHand.dealersUp();		int sv = currentHand.splitValue();		String s = null;		// Check pair split		if (sv != 0)					s = split(sv,dv);		if (s != null) return s;		// Check double down		if (getRules().canDouble(v) && currentHand.canDoubleDown()) {			if (currentHand.isSoft()) 				s = soft(v,dv);			if (s != null) return s;			s = hardDouble(v,dv);			if (s != null) return s;		}		// Soft 18, A-7, has it's own Stand row in the Blackbelt in Blackjack chart		if (currentHand.isSoft() && v == 18) {			if (dv == 1) {				if (getRules().isH17()) {					return "Hit";				}				else {					if (getCount() >= 2) return "Stand";					return "Hit";				}			}			else if (dv < 9) return "Stand";			return "Hit";		}		if (v > 17) return "Stand";		if (v < 12) return "Hit";		s = stand(v,dv);		if (s == null)			throw new IllegalStateException("ZenStrategy failed to update basic for hand " + currentHand + " v=" + v + " dv=" + dv);		return s;	}		private String split(int sv,int dv) {		if (getRules().isDAS()) 	// double allowed after split			return split_das(sv,dv);		switch (sv) {			case 10:				if (dv == 2 || dv == 3) { 					if (getCount() >= 4) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 5 || dv == 6) {					if (getCount() >= 2) return "Split";					return null;				}				return null;			case 1:				if (dv == 1) {					if (getCount() >= -2) return "Split";					return null;				}				return "Split";			case 9:				if (dv == 1) {					if (getCount() >= 2) return "Split";					return null;				}				else if (dv < 4) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv < 7) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 7) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 8) return "Split";				return null;			case 8:				if (dv == 10) {					if (getCount() < 2) return "Split";					return null;				}				else if (dv == 1) {					if (getRules().isH17()) {						if (getCount() >= 0) return "Split";						return null;					}					else return "Split";				}				return "Split";			case 7:				if (dv > 7) return null;				return "Split";			case 6:				if (dv > 6) return null;				else if (dv == 6) return "Split";				else if (dv == 2) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -2) return "Split";					return null;				}				return null;		// Shouldn't get here			case 5:			case 4:				return null;			case 3:				if (dv > 7) return null;				else if (dv == 6) return "Split";				else if (dv == 2) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 7) {					if (getCount() < 3) return "Split";					return null;				}				return null;		// Shouldn't get here			case 2:				if (dv > 7) return null;				else if (dv > 4) return "Split";				else if (dv == 2) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= -1) return "Split";					return null;				}				return null;		// Shouldn't get here			default:				return null;		}	}		private String split_das(int sv,int dv) {		switch (sv) {			case 10:				if (dv == 1 || dv > 6) return null;				else if (dv > 4) {					if (getCount() >= 2) return "Split";					return null;				}				else if (dv > 2) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 2) {					if (getCount() >= 4) {						if (getCount() >= 4) return "Split";						return null;					}					return null;				}			case 1:				if (dv == 1) {					if (getCount() >= -2)						return "Split";					return null;				}				return "Split";			case 9:				if (dv == 10) return null;				else if (dv == 1 || dv == 7) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 3 || dv == 4) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 2) {					if (getCount() >= -1) return "Split";					return null; 				}				return "Split";			case 8:				if (dv == 10) {					if (getCount() < 4) return "Split";					return null;				}				return "Split";			case 7:				if (dv > 8 || dv == 1) return null;				else if (dv == 8) {					if (decksNum == 1) return "Split";					else if (getCount() >= 1) return "Split";					return null;				}			case 6:				if (dv > 7 || dv == 1) return null;				else if (dv == 7) {					if (decksNum == 1) return "Split";					return null;				}				else if (dv > 3) return "Split";				else if (dv == 2) {					if (getCount() >= -1) return "Split";					return null;				}				else if (dv == 3) {					if (getCount() >= -2) return "Split";					return null;				}			case 5:				return null;			case 4:				if (dv > 6 || dv < 3) return null;				else if (dv == 3) {					if (getCount() >= 3) return "Split";					return null;				}				else if (dv == 4) {					if (getCount() >= 1) return "Split";					return null;				}				else if (dv == 5) {					if (getCount() >= 0) return "Split";					return null;				}				else if (dv == 6) {					if (getCount() >= 1) return "Split";					return null;				}			case 3:				if (dv > 8 || dv == 1) return null;				else if (dv > 2 && dv < 8) return "Split";				else if (dv == 2) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 8) {					if (decksNum == 1) return "Split";					else if (getCount() >= 2) return "Split";					return null;				}			case 2:				if (dv > 8 || dv == 1) return null;				else if (dv < 4) {					if (getCount() >= -2) return "Split";					return null;				}				else if (dv == 8) {					if (getCount() >= 3) return "Split";					return null;				}			default:				return null;		}	}		private String soft(int v,int dv) {		switch (v) {			case 21: return "Stand";			case 20:				if (dv == 1 || dv > 6) return "Stand";				else if (dv > 4) {					if (getCount() >= 2) return "Double down";					return "Stand";				}				else if (dv > 2) {					if (getCount() >= 3) return "Double down";					return "Stand";				}				else if (dv == 2) {					if (getCount() >= 4) return "Double down";					return "Stand";				}				return null;			case 19:				if (dv == 1 || dv > 6) return "Stand";				else if (dv > 4) {					if (getCount() >= 0) return "Double down";					return "Stand";				}				else if (dv == 2) {					if (getCount() >= 3) return "Double down";					return "Stand";				}				else if (dv == 3) {					if (getCount() >= 2) return "Double down";					return "Stand";				}				else if (dv == 4) {					if (getCount() >= 1) return "Double down";					return "Stand";				}				return null;			case 18:				if (dv == 1 || dv > 6) return null;				else if (dv == 2) {					if (getCount() >= 0) return "Double down";					return null;				}				else if (dv == 3) {					if (getCount() >= -1) return "Double down";					return null;				}				else if (dv == 4) {					if (getCount() >= -2) return "Double down";					return null;				}				else if (dv == 5) {					if (getCount() >= -3) return "Double down";					return null;				}				else if (dv == 6) {					if (getRules().isH17()) {						if (getCount() >= -4) return "Double down";						return null;					}					else if (getCount() >= -3) return "Double down";					return null;				}				return null;			case 17:				if (dv == 1 || dv > 6) return null;				else if (dv == 2) {					if (getCount() >= 0) return "Double down";					return null;				}				else if (dv == 3) {					if (getCount() >= -1) return "Double down";					return null;				}				else if (dv == 4) {					if (getCount() >= -2) return "Double down";					return null;				}				else if (dv == 5) {					if (getCount() >= -4) return "Double down";					return null;				}				else if (dv == 6) return "Double down";				return null;			case 16:				if (dv == 1 || dv > 6) return null;				else if (dv == 2) {					if (getCount() >= 5) return "Double down";					return null;				}				else if (dv == 3) {					if (getCount() >= 1) return "Double down";					return null;				}				else if (dv == 4) {					if (getCount() >= -1) return "Double down";					return null;				}				else if (dv == 5) {					if (getCount() >= -3) return "Double down";					return null;				}				else if (dv == 6) return "Double down";				return null;			case 15:				if (dv < 3 || dv > 6) return null;				else if (dv == 3) {					if (getCount() >= 2) return "Double down";					return null;				}				else if (dv == 4) {					if (getCount() >= 0) return "Double down";					return null;				}				else if (dv == 5) {					if (getCount() >= -2) return "Double down";					return null;				}				else if (dv == 6) {					if (getCount() >= -4) return "Double down";					return null;				}				return null;			case 14:				if (dv < 3 || dv > 6) return null;				else if (dv == 3) {					if (getCount() >= 3) return "Double down";					return null;				}				else if (dv == 4) {					if (getCount() >= 1) return "Double down";					return null;				}				else if (dv == 5) {					if (getCount() >= -1) return "Double down";					return null;				}				else if (dv == 6) {					if (getRules().isH17()) {						if (getCount() >= -3) return "Double down";						return null;					}					else if (getCount() >= -2) return "Double down";				}				return null;			case 13:				if (dv < 3 || dv > 6) return null;				else if (dv == 3) {					if (getCount() >= 3) return "Double down";					return null;				}				else if (dv == 4) {					if (getCount() >= 1) return "Double down";					return null;				}				else if (dv == 5) {					if (getCount() >= 0) return "Double down";					return null;				}				else if (dv == 6) {					if (getCount() >= -1) return "Double down";					return null;				}				return null;		}		return null;	}		private String hardDouble(int v,int dv) {		if (v == 11) {			if (dv > 1 && dv < 7) return "Double down";			else if (dv == 9 || dv == 10) {				if (getCount() >= -2) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (getCount() >= -3) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv == 1) {				if (getCount() >= 0) return "Double down";				return "Hit";			}			return null;		}		else if (v == 10) {			if (dv == 1 || dv == 10) {				if (getCount() >= 1) return "Double down";				return "Hit";			}			else if (dv < 4) {				if (getCount() >= -4) return "Double down";				return "Hit";			}			else if (dv < 7) return "Double down";			else if (dv == 7) {				if (getCount() >= -3) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (getCount() >= -2) return "Double down";				return "Hit";			}			else if (dv == 9) {				if (getCount() >= -1) return "Double down";				return "Hit";			}			return null;		}		else if (v == 9) {			if (dv > 8 || dv == 1) return "Hit";			else if (dv < 4) {				if (getCount() >= 0) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= -1) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= -2) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= -3) return "Double down";				return "Hit";			}			else if (dv == 7) {				if (getCount() >= 2) return "Double down";				return "Hit";			}			else if (dv == 8) {				if (getCount() >= 4) return "Double down";				return "Hit";			}			return null;		}		else if (v == 8) {			if (dv > 6 || dv == 1) return "Hit";			else if (dv == 2) {				if (getCount() >= 5) return "Double down";				return "Hit";			}			else if (dv == 3) {				if (getCount() >= 4) return "Double down";				return "Hit";			}			else if (dv == 4) {				if (getCount() >= 3) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= 2) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= 1) return "Double down";				return "Hit";			}			return null;		}		else if (v == 7) {			if (dv > 6 && dv < 4) return "Hit";			else if (dv == 4) {				if (getCount() >= 5) return "Double down";				return "Hit";			}			else if (dv == 5) {				if (getCount() >= 5) return "Double down";				return "Hit";			}			else if (dv == 6) {				if (getCount() >= 5) return "Double down";				return "Hit";			}			return null;		}				return null;	}		private String stand(int v,int dv) {		switch (v) {			case 17:				if (dv == 1) {					if (getRules().isH17()) {						if (getCount() >= -2) return "Stand";						return "Hit";					}					else {						if (getCount() >= -3) return "Stand";						return "Hit";					}				}				return "Stand";			case 16:				if (dv == 10) {					if (getCount() > 0) return "Stand";					return "Hit";				}				else if (dv == 1) {					if (getRules().isH17()) {						if (getCount() >= 1) return "Stand";						return "Hit";					}					else {						if (getCount() >= 3) return "Stand";						return "Hit";					}				}				else if (dv == 2) {					if (getCount() >= -4) return "Stand";					return "Hit";				}				else if (dv < 7) return "Stand";				else if (dv == 7) {					if (getCount() >= 5) return "Stand";					return "Hit";				}				else if (dv == 8) {					if (getCount() >= 4) return "Stand";					return "Hit";				}				else if (dv == 9) {					if (getCount() >= 2) return "Stand";					return "Hit";				}				return null;			case 15:				if (dv == 10) {					if (getCount() >= 1) return "Stand";					return "Hit";				}				else if (dv == 1) {					if (getRules().isH17()) {						if (getCount() >= 2) return "Stand";						return "Hit";					}					else {						if (getCount() >= 4) return "Stand";						return "Hit";					}				}				else if (dv == 2) {					if (getCount() >= -2) return "Stand";					return "Hit";				}				else if (dv == 3) {					if (getCount() >= -3) return "Stand";					return "Hit";				}				else if (dv == 4 || dv == 5) {					if (getCount() >= -4) return "Stand";					return "Hit";				}				else if (dv == 6) return "Stand";				else if (dv == 7) return "Hit";				else if (dv == 8) {					if (getCount() >= 5) return "Stand";					return "Hit";				}				else if (dv == 9) {					if (getCount() >= 4) return "Stand";					return "Hit";				}				return null;			case 14:				if (dv == 10) {					if (getCount() >= 3) return "Stand";					return "Hit";				}				else if (dv == 1) {					if (getRules().isH17()) {						if (getCount() >= 3) return "Stand";						return "Hit";					}					else {						if (getCount() >= 5) return "Stand";						return "Hit";					}				}				else if (dv > 6) return "Hit";				else if (dv == 2) {					if (getCount() >= -1) return "Stand";					return "Hit";				}				else if (dv == 3 || dv == 4) {					if (getCount() >= -2) return "Stand";					return "Hit";				}				else if (dv == 5) {					if (getCount() >= -3) return "Stand";					return "Hit";				}				else if (dv == 6) {					if (getRules().isH17()) {						if (getCount() >= -4) return "Stand";						return "Hit";					}					else {						if (getCount() >= -3) return "Stand";						return "Hit";					}				}				return null;			case 13:				if (dv > 6 || dv == 1) return "Hit";				else if (dv == 2) {					if (getCount() >= 0) return "Stand";					return "Hit";				}				else if (dv == 3 || dv == 4) {					if (getCount() >= -1) return "Stand";					return "Hit";				}				else if (dv == 5) {					if (getCount() >= -2) return "Stand";					return "Hit";				}				else if (dv == 6) {					if (getRules().isH17()) {						if (getCount() >= -3) return "Stand";						return "Hit";					}					else {						if (getCount() >= -2) return "Stand";						return "Hit";					}				}			case 12:				if (dv > 6 || dv == 1) return "Hit";				else if (dv == 2 || dv == 3) {					if (getCount() >= 1) return "Stand";					return "Hit";				}				else if (dv == 4) {					if (getCount() >= 0) return "Stand";					return "Hit";				}				else if (dv == 5) {					if (getCount() >= -1) return "Stand";					return "Hit";				}				else if (dv == 6) {					if (getRules().isH17()) {						if (getCount() >= -1) return "Stand";						return "Hit";					}					else {						if (getCount() >= 0) return "Stand";						return "Hit";					}				}			default:				return null;		}	}		public void updateCount(Deck d,Card c) { 				int v = c.iValue;		if (v == 10) rc -= 2;		else if (v == 7) rc += 1;		else if (v == 1) rc -= 1;		else if (v == 2 || v == 3) rc += 1;		else if (v < 7) rc += 2;	}	public int getCount() { return rc; }		// supported charts	protected boolean isDoubleChart() { return true; }}