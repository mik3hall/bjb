package org.bjb;import java.awt.*;import java.awt.event.*;import java.awt.font.*;import java.awt.geom.Rectangle2D;import java.awt.image.*;import javax.swing.*;import javax.swing.Timer;import java.util.ArrayList;public class MessageViewer implements ActionListener {	private ArrayList<String> gameMessages = new ArrayList<String>();	private ArrayList<String> handMessages = new ArrayList<String>();	private final PlayingArea pa;	private float lastX = 999.0f;	private static final String greeting = "Welcome to Blackjack Blastoff!";	private static final int SPACING = 10;	final private static Font font = new Font("Serif", Font.BOLD, 16);//	final private static Font font = new Font("Serif", Font.BOLD | Font.ITALIC, 16);//	final private static Font font = new Font("Monospaced", Font.BOLD, 16);	final private BufferedImage offscreen;	final private Graphics2D og2;	final private FontRenderContext frc;	private final Object LOCK = new Object();	boolean done = false;	Timer timer = null;	/*		Message indicating casinos could eliminate card counting edge with 8 deck show		except probably no one would play.		Something on unbalanced counts and pivot count.	*/	int yClearInc = 4;//	int yClearInc = 5;		// 4 If not outline 		public MessageViewer(final PlayingArea pa) {		this.pa = pa;		if (pa.getGraphics() == null) throw new IllegalArgumentException("MessageViewer graphics unavailable");		Graphics2D gtmp = (Graphics2D)pa.getGraphics();		gtmp.setRenderingHint(RenderingHints.KEY_ANTIALIASING,			RenderingHints.VALUE_ANTIALIAS_ON);		gtmp.setStroke(new BasicStroke(2.0f));		frc = gtmp.getFontRenderContext();		String s = "Temp";		GlyphVector gv = font.createGlyphVector(frc, s);		Rectangle2D r = gv.getPixelBounds(frc,0,0);		offscreen = new BufferedImage(pa.getWidth(),(int)r.getHeight()+yClearInc,BufferedImage.TYPE_INT_ARGB);		og2 = offscreen.createGraphics();		og2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,			RenderingHints.VALUE_ANTIALIAS_ON);		og2.setStroke(new BasicStroke(2.0f));//		addGameMessage(greeting);		SwingUtilities.invokeLater(new Runnable() {			public void run() {				draw((Graphics2D)pa.getGraphics());			}		});	}		public void addGameMessage(String text) {		synchronized(LOCK) {			gameMessages.add(text);		}	}		public void clearHandMessages() {		synchronized(LOCK) {			handMessages.clear();		}	}		public void addHandMessage(String text) {		System.out.println("MV add hand message " + text);		synchronized(LOCK) {			handMessages.add(text);		}	}	public void actionPerformed(ActionEvent evt) {		try {			SwingUtilities.invokeLater(new Runnable() {				public void run() {					draw((Graphics2D)pa.getGraphics());				}			});		}		catch (Throwable tossed) { tossed.printStackTrace(); }	}	 		public void draw(Graphics2D g2) {//		if (messages.size() == 0) //			return;		if (g2 == null) return;		Color c = g2.getColor();		float x = 0.0f;		ArrayList<GlyphVector> gvs = new ArrayList<GlyphVector>();		int num = gameMessages.size()+handMessages.size()+2;		double[] gvWidths = new double[num]; 		int gvHeight = 0;		float gvWidth = 0;		GlyphVector gv1 = font.createGlyphVector(frc,greeting);		gvHeight = (int)gv1.getPixelBounds(frc,0,0).getHeight();		gvWidths[0] = gv1.getPixelBounds(frc,0,0).getWidth();		gvWidth += gvWidths[0] + SPACING;		gvs.add(gv1);		String penetrationMessage = getPenetrationMessage();		GlyphVector gv2 = font.createGlyphVector(frc,penetrationMessage);		gvWidths[1] = gv2.getPixelBounds(frc,0,0).getWidth();		gvWidth += gvWidths[1] + SPACING;		gvs.add(gv2);		int i = 2;		int j = i;		synchronized(LOCK) {			for (;i<handMessages.size()+j;i++) {				gvs.add(font.createGlyphVector(frc,handMessages.get(i-j)));				if (gvs.size() > gvWidths.length) break;	// Timing issue on one added?				gvWidths[i] = gvs.get(i).getPixelBounds(frc,0,0).getWidth();				gvWidth += gvWidths[i] + SPACING;			}			j = i;			for (;i<gameMessages.size()+j;i++) {				gvs.add(font.createGlyphVector(frc,gameMessages.get(i-j)));				gvWidths[i] = gvs.get(i).getPixelBounds(frc,0,0).getWidth();				gvWidth += gvWidths[i] + SPACING;			}			og2.setColor(pa.getBackground());			og2.fillRect(0,0,pa.getWidth(),gvHeight+yClearInc);			if (lastX <= -gvWidth-1.0f) {				x = (float)pa.getWidth() - gvWidth - 2.0f;				lastX = x;			}			else if (lastX >= -gvWidth) {				x = lastX - 2.0f;				lastX = x;			}			else {				System.out.println("MV with lastX " + lastX + " gvWidth " + gvWidth);				timer.stop();				timer = null;			}			float y = gvHeight;			float saveX = x;			for (i=0;i<gvs.size();i++) {				if (x < 0 && gvWidths[i]+ SPACING + x < 0f) {					x += gvWidths[i] + SPACING;					continue;				}				GlyphVector gv = gvs.get(i);				if (i % 3 == 0) 					og2.setColor(Color.blue);				else if (i % 3 == 1)					og2.setColor(Color.black);				else if (i % 3 == 2)					og2.setColor(Color.red);				og2.drawGlyphVector(gv,x,y);				if (gvWidths.length <= i) return;				x += gvWidths[i] + SPACING;			}			if (saveX < 0f) {				float diff = 0f;				if (pa.getWidth() > gvWidth || pa.getWidth() - saveX <= gvWidth) 					diff = pa.getWidth() + saveX;				else if (pa.getWidth() - saveX > gvWidth) 					diff = gvWidth + saveX;				x = diff;				if (x >0) {					for (i=0;i<gvs.size();i++) {						GlyphVector gv = gvs.get(i);						if (i % 3 == 0) 							og2.setColor(Color.blue);						else if (i % 3 == 1)							og2.setColor(Color.black);						else if (i % 3 == 2)							og2.setColor(Color.red);						og2.drawGlyphVector(gv,x,y);						x += gvWidths[i] + SPACING;						if (x > pa.getWidth()) break;					}				}			}		}		g2.setColor(c);		g2.drawImage(offscreen,0,0,null);//		g2.transform(0,0);		// restore origin		if (timer == null) {// This works fine just drawing the glyphvector			timer = new Timer(50,this); //			timer = new Timer(100,this);			timer.start();		}	}		private String getPenetrationMessage() {		StringBuffer msg = new StringBuffer("For a ");		int decks = BlackJackApp.getDecks();		msg.append(new Integer(decks).toString());		msg.append(" deck game, shuffle is on ");		if (decks < 4) 			msg.append(" 66% penetration.");		else			msg.append(" 75% penetration");		return msg.toString();	}}